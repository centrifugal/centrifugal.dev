"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[2929],{4083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"pro/throttling","title":"Operation throttling","description":"The throttling feature allows limiting the number of operations each user can issue during a configured time interval. This is useful to protect the system from misusing or protect it from a bug in the application frontend code.","source":"@site/versioned_docs/version-3/pro/throttling.md","sourceDirName":"pro","slug":"/pro/throttling","permalink":"/docs/3/pro/throttling","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-3/pro/throttling.md","tags":[],"version":"3","frontMatter":{"id":"throttling","title":"Operation throttling"},"sidebar":"Pro","previous":{"title":"User status","permalink":"/docs/3/pro/user_status"},"next":{"title":"User connections API","permalink":"/docs/3/pro/user_connections"}}');var s=n(74848),r=n(28453);const o={id:"throttling",title:"Operation throttling"},l=void 0,a={},c=[{value:"Redis throttling",id:"redis-throttling",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The throttling feature allows limiting the number of operations each user can issue during a configured time interval. This is useful to protect the system from misusing or protect it from a bug in the application frontend code."}),"\n",(0,s.jsx)(t.h2,{id:"redis-throttling",children:"Redis throttling"}),"\n",(0,s.jsxs)(t.p,{children:["At this moment Centrifugo PRO provides throttling over Redis. It's only possible to throttle by the user ID. Requests from anonymous users can't be throttled. Throttling with Redis uses ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Token_bucket",children:"token bucket algorithm"})," internally."]}),"\n",(0,s.jsx)(t.p,{children:"Here is a list of operations that can be throttled:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"connect"}),"\n",(0,s.jsx)(t.li,{children:"subscribe"}),"\n",(0,s.jsx)(t.li,{children:"publish"}),"\n",(0,s.jsx)(t.li,{children:"history"}),"\n",(0,s.jsx)(t.li,{children:"presence"}),"\n",(0,s.jsx)(t.li,{children:"presence_stats"}),"\n",(0,s.jsx)(t.li,{children:"refresh"}),"\n",(0,s.jsx)(t.li,{children:"sub_refresh"}),"\n",(0,s.jsx)(t.li,{children:"rpc (with method resolution)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"An example configuration:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "redis_throttling": {\n        "enabled": false,\n        "redis_address": "localhost:6379",\n        "buckets": {\n            "publish": {\n                "enabled": true,\n                "interval": "1s",\n                "rate": 1,\n                "capacity": 1\n            },\n            "rpc": {\n                "enabled": true,\n                "interval": "1s",\n                "rate": 10,\n                "capacity": 1,\n                "method_override": [\n                    {\n                        "method": "updateActiveStatus",\n                        "interval": "20s",\n                        "rate": 1,\n                        "capacity": 1\n                    }\n                ]\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"This configuration enables throttling and throttles publish attempts in a way that only 1 publication is possible in 1 second from the same user."}),"\n",(0,s.jsx)(t.p,{children:"Redis configuration for throttling feature matches Centrifugo Redis engine configuration. So Centrifugo supports client-side consistent sharding to scale Redis, Redis Sentinel, Redis Cluster for throttling feature too."}),"\n",(0,s.jsxs)(t.p,{children:["It's also possible to reuse Centrifugo Redis engine by setting ",(0,s.jsx)(t.code,{children:"use_redis_from_engine"})," option instead of custom throttling Redis address declaration, like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "engine": "redis",\n    "redis_address": "localhost:6379",\n    "redis_throttling": {\n        "enabled": false,\n        "use_redis_from_engine": true,\n        "buckets": {\n            "publish": {\n                "enabled": true,\n                "interval": "1s",\n                "rate": 1,\n                "capacity": 1\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"In this case throttling will simply connect to Redis instances configured for an Engine."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);