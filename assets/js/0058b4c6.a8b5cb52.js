"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[849],{86164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"v6","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"Introduction":[{"type":"link","label":"Centrifugo introduction","href":"/docs/getting-started/introduction","docId":"getting-started/introduction","unlisted":false},{"type":"link","label":"Join community","href":"/docs/getting-started/community","docId":"getting-started/community","unlisted":false},{"type":"link","label":"Install Centrifugo","href":"/docs/getting-started/installation","docId":"getting-started/installation","unlisted":false},{"type":"link","label":"Quickstart tutorial","href":"/docs/getting-started/quickstart","docId":"getting-started/quickstart","unlisted":false},{"type":"link","label":"Main highlights","href":"/docs/getting-started/highlights","docId":"getting-started/highlights","unlisted":false},{"type":"link","label":"Integration guide","href":"/docs/getting-started/integration","docId":"getting-started/integration","unlisted":false},{"type":"link","label":"Design overview","href":"/docs/getting-started/design","docId":"getting-started/design","unlisted":false},{"type":"link","label":"Ecosystem notes","href":"/docs/getting-started/ecosystem","docId":"getting-started/ecosystem","unlisted":false},{"type":"link","label":"Comparing with others","href":"/docs/getting-started/comparisons","docId":"getting-started/comparisons","unlisted":false},{"type":"link","label":"Migrating to v6","href":"/docs/getting-started/migration_v6","docId":"getting-started/migration_v6","unlisted":false}],"Guides":[{"type":"link","label":"Configure Centrifugo","href":"/docs/server/configuration","docId":"server/configuration","unlisted":false},{"type":"link","label":"Server API walkthrough","href":"/docs/server/server_api","docId":"server/server_api","unlisted":false},{"type":"link","label":"Client JWT authentication","href":"/docs/server/authentication","docId":"server/authentication","unlisted":false},{"type":"link","label":"Channels and namespaces","href":"/docs/server/channels","docId":"server/channels","unlisted":false},{"type":"link","label":"Channel permission model","href":"/docs/server/channel_permissions","docId":"server/channel_permissions","unlisted":false},{"type":"link","label":"Channel JWT authorization","href":"/docs/server/channel_token_auth","docId":"server/channel_token_auth","unlisted":false},{"type":"link","label":"Server-side subscriptions","href":"/docs/server/server_subs","docId":"server/server_subs","unlisted":false},{"type":"link","label":"Engines and scalability","href":"/docs/server/engines","docId":"server/engines","unlisted":false},{"type":"link","label":"Async consumers","href":"/docs/server/consumers","docId":"server/consumers","unlisted":false},{"type":"link","label":"History and stream recovery","href":"/docs/server/history_and_recovery","docId":"server/history_and_recovery","unlisted":false},{"type":"link","label":"Cache recovery mode","href":"/docs/server/cache_recovery","docId":"server/cache_recovery","unlisted":false},{"type":"link","label":"Delta compression","href":"/docs/server/delta_compression","docId":"server/delta_compression","unlisted":false},{"type":"link","label":"Publication filtering","href":"/docs/server/publication_filtering","docId":"server/publication_filtering","unlisted":false},{"type":"link","label":"Online presence","href":"/docs/server/presence","docId":"server/presence","unlisted":false},{"type":"link","label":"Proxy events to the backend","href":"/docs/server/proxy","docId":"server/proxy","unlisted":false},{"type":"link","label":"Proxy subscription streams","href":"/docs/server/proxy_streams","docId":"server/proxy_streams","unlisted":false},{"type":"link","label":"Admin web UI","href":"/docs/server/admin_web","docId":"server/admin_web","unlisted":false},{"type":"link","label":"Server observability","href":"/docs/server/observability","docId":"server/observability","unlisted":false},{"type":"link","label":"Infrastructure tuning","href":"/docs/server/infra_tuning","docId":"server/infra_tuning","unlisted":false},{"type":"link","label":"Load balancing","href":"/docs/server/load_balancing","docId":"server/load_balancing","unlisted":false},{"type":"link","label":"Client protocol codes","href":"/docs/server/codes","docId":"server/codes","unlisted":false},{"type":"link","label":"Helper CLI commands","href":"/docs/server/console_commands","docId":"server/console_commands","unlisted":false}],"Transports":[{"type":"link","label":"Real-time transports","href":"/docs/transports/overview","docId":"transports/overview","unlisted":false},{"type":"category","label":"Bidirectional","collapsed":false,"items":[{"type":"link","label":"Client SDK specification","href":"/docs/transports/client_api","docId":"transports/client_api","unlisted":false},{"type":"link","label":"Client real-time SDKs","href":"/docs/transports/client_sdk","docId":"transports/client_sdk","unlisted":false},{"type":"link","label":"WebSocket","href":"/docs/transports/websocket","docId":"transports/websocket","unlisted":false},{"type":"link","label":"HTTP streaming","href":"/docs/transports/http_stream","docId":"transports/http_stream","unlisted":false},{"type":"link","label":"Server-Sent Events (SSE)","href":"/docs/transports/sse","docId":"transports/sse","unlisted":false},{"type":"link","label":"WebTransport","href":"/docs/transports/webtransport","docId":"transports/webtransport","unlisted":false},{"type":"link","label":"Client protocol","href":"/docs/transports/client_protocol","docId":"transports/client_protocol","unlisted":false}],"collapsible":true},{"type":"category","label":"Unidirectional","collapsed":false,"items":[{"type":"link","label":"Unidirectional protocol","href":"/docs/transports/uni_client_protocol","docId":"transports/uni_client_protocol","unlisted":false},{"type":"link","label":"WebSocket","href":"/docs/transports/uni_websocket","docId":"transports/uni_websocket","unlisted":false},{"type":"link","label":"HTTP streaming","href":"/docs/transports/uni_http_stream","docId":"transports/uni_http_stream","unlisted":false},{"type":"link","label":"Server-Sent Events (SSE)","href":"/docs/transports/uni_sse","docId":"transports/uni_sse","unlisted":false},{"type":"link","label":"GRPC","href":"/docs/transports/uni_grpc","docId":"transports/uni_grpc","unlisted":false}],"collapsible":true}],"Pro":[{"type":"link","label":"Centrifugo PRO","href":"/docs/pro/overview","docId":"pro/overview","unlisted":false},{"type":"link","label":"Install and run PRO version","href":"/docs/pro/install_and_run","docId":"pro/install_and_run","unlisted":false},{"type":"category","label":"PRO version features","collapsed":false,"items":[{"type":"link","label":"Push notification API","href":"/docs/pro/push_notifications","docId":"pro/push_notifications","unlisted":false},{"type":"link","label":"User and channel tracing","href":"/docs/pro/tracing","docId":"pro/tracing","unlisted":false},{"type":"link","label":"Analytics with ClickHouse","href":"/docs/pro/analytics","docId":"pro/analytics","unlisted":false},{"type":"link","label":"Operation rate limits","href":"/docs/pro/rate_limiting","docId":"pro/rate_limiting","unlisted":false},{"type":"link","label":"Per-namespace engines","href":"/docs/pro/namespace_engines","docId":"pro/namespace_engines","unlisted":false},{"type":"link","label":"Admin UI: SSO, Snapshots","href":"/docs/pro/admin_ui","docId":"pro/admin_ui","unlisted":false},{"type":"link","label":"Server API JWKS auth","href":"/docs/pro/server_api_auth","docId":"pro/server_api_auth","unlisted":false},{"type":"link","label":"User status API","href":"/docs/pro/user_status","docId":"pro/user_status","unlisted":false},{"type":"link","label":"Connections API","href":"/docs/pro/connections","docId":"pro/connections","unlisted":false},{"type":"link","label":"User blocking API","href":"/docs/pro/user_block","docId":"pro/user_block","unlisted":false},{"type":"link","label":"Token revocation API","href":"/docs/pro/token_revocation","docId":"pro/token_revocation","unlisted":false},{"type":"link","label":"Channel state events","href":"/docs/pro/channel_state_events","docId":"pro/channel_state_events","unlisted":false},{"type":"link","label":"Cache empty events","href":"/docs/pro/channel_cache_empty","docId":"pro/channel_cache_empty","unlisted":false},{"type":"link","label":"Channel capabilities","href":"/docs/pro/capabilities","docId":"pro/capabilities","unlisted":false},{"type":"link","label":"Channel patterns","href":"/docs/pro/channel_patterns","docId":"pro/channel_patterns","unlisted":false},{"type":"link","label":"Channel CEL expressions","href":"/docs/pro/cel_expressions","docId":"pro/cel_expressions","unlisted":false},{"type":"link","label":"Faster performance","href":"/docs/pro/performance","docId":"pro/performance","unlisted":false},{"type":"link","label":"Scalability optimizations","href":"/docs/pro/scalability","docId":"pro/scalability","unlisted":false},{"type":"link","label":"Bandwidth optimizations","href":"/docs/pro/bandwidth_optimizations","docId":"pro/bandwidth_optimizations","unlisted":false},{"type":"link","label":"Message batching control","href":"/docs/pro/client_message_batching","docId":"pro/client_message_batching","unlisted":false},{"type":"link","label":"Observability enhancements","href":"/docs/pro/observability_enhancements","docId":"pro/observability_enhancements","unlisted":false}],"collapsible":true}],"Tutorial":[{"type":"link","label":"Real-time app from scratch","href":"/docs/tutorial/intro","docId":"tutorial/intro","unlisted":false},{"type":"link","label":"App layout and behavior","href":"/docs/tutorial/layout","docId":"tutorial/layout","unlisted":false},{"type":"link","label":"Setting up backend and database","href":"/docs/tutorial/backend","docId":"tutorial/backend","unlisted":false},{"type":"link","label":"Adding reverse proxy","href":"/docs/tutorial/reverse_proxy","docId":"tutorial/reverse_proxy","unlisted":false},{"type":"link","label":"Creating SPA frontend","href":"/docs/tutorial/frontend","docId":"tutorial/frontend","unlisted":false},{"type":"link","label":"Integrating Centrifugo","href":"/docs/tutorial/centrifugo","docId":"tutorial/centrifugo","unlisted":false},{"type":"link","label":"Missed messages recovery","href":"/docs/tutorial/recovery","docId":"tutorial/recovery","unlisted":false},{"type":"link","label":"Broadcast: outbox and CDC","href":"/docs/tutorial/outbox_cdc","docId":"tutorial/outbox_cdc","unlisted":false},{"type":"link","label":"Scale to 100k room members","href":"/docs/tutorial/scale","docId":"tutorial/scale","unlisted":false},{"type":"link","label":"Wrapping up \u2013 things learnt","href":"/docs/tutorial/outro","docId":"tutorial/outro","unlisted":false},{"type":"link","label":"Appx #1: Possible improvements","href":"/docs/tutorial/improvements","docId":"tutorial/improvements","unlisted":false},{"type":"link","label":"Appx #2: Tips and tricks","href":"/docs/tutorial/tips_and_tricks","docId":"tutorial/tips_and_tricks","unlisted":false},{"type":"link","label":"Appx #3: Prometheus and Grafana","href":"/docs/tutorial/monitoring","docId":"tutorial/monitoring","unlisted":false},{"type":"link","label":"Appx #4: Adding push notifications","href":"/docs/tutorial/push_notifications","docId":"tutorial/push_notifications","unlisted":false}]},"docs":{"attributions":{"id":"attributions","title":"Attributions","description":"Landing Page Images"},"faq/faq_index":{"id":"faq/faq_index","title":"Frequently Asked Questions","description":"Answers to popular questions here."},"flow_diagrams":{"id":"flow_diagrams","title":"flow_diagrams","description":"For swimlanes.io:"},"getting-started/community":{"id":"getting-started/community","title":"Join community","description":"If you find Centrifugo interesting, you are welcome to join our community rooms on Telegram (the most active) and Discord.","sidebar":"Introduction"},"getting-started/comparisons":{"id":"getting-started/comparisons","title":"Comparing with others","description":"Let\'s compare Centrifugo with various systems. These comparisons arose from popular questions raised in our communities. Here we are emphasizing things that make Centrifugo special.","sidebar":"Introduction"},"getting-started/design":{"id":"getting-started/design","title":"Design overview","description":"Let\'s discuss some architectural and design topics about Centrifugo.","sidebar":"Introduction"},"getting-started/ecosystem":{"id":"getting-started/ecosystem","title":"Ecosystem notes","description":"Some additional notes about our ecosystem which may help you develop with our tech.","sidebar":"Introduction"},"getting-started/highlights":{"id":"getting-started/highlights","title":"Main highlights","description":"At this point, you know how to build the simplest real-time app with Centrifugo. We also provide a mode advanced tutorial which you can refer to when working with Centrifugo.","sidebar":"Introduction"},"getting-started/installation":{"id":"getting-started/installation","title":"Install Centrifugo","description":"Centrifugo server is written in the Go language. It\'s open-source software, and the source code is available on Github.","sidebar":"Introduction"},"getting-started/integration":{"id":"getting-started/integration","title":"Integration guide","description":"This chapter aims to help you get started with Centrifugo. We will look at a step-by-step workflow of integrating your application with Centrifugo, providing links to relevant parts of this documentation.","sidebar":"Introduction"},"getting-started/introduction":{"id":"getting-started/introduction","title":"Centrifugo introduction","description":"Centrifugo is an open-source real-time messaging server. Centrifugo can instantly deliver messages to application online users connected over supported transports \u2013 WebSocket, HTTP-streaming, Server-Sent Events (SSE), WebTransport, GRPC. Centrifugo is built around channel concept \u2013 clients subscribe to channels to receive publications, different subscriptions are multiplexed over a single connection to the server. So Centrifugo is a user-facing PUB/SUB server, with many additional features around this core concept.","sidebar":"Introduction"},"getting-started/migration_v4":{"id":"getting-started/migration_v4","title":"Migrating to v4","description":"Centrifugo v4 development was concentrated around two main things:"},"getting-started/migration_v5":{"id":"getting-started/migration_v5","title":"Migrating to v5","description":"Centrifugo v5 migration from v4 should be smooth for most of the use cases."},"getting-started/migration_v6":{"id":"getting-started/migration_v6","title":"Migrating to v6","description":"In this chapter we help to migrate from Centrifugo v5 to Centrifugo v6.","sidebar":"Introduction"},"getting-started/quickstart":{"id":"getting-started/quickstart","title":"Quickstart tutorial \u23f1\ufe0f","description":"In this tutorial, we will build a very simple browser application with Centrifugo. Users will connect to Centrifugo over WebSocket, subscribe to a channel, and start receiving all channel publications (messages published to that channel). In our case, we will send a counter value to all channel subscribers to update the counter widget in all open browser tabs in real-time.","sidebar":"Introduction"},"pro/admin_idp_auth":{"id":"pro/admin_idp_auth","title":"SSO for admin UI using OpenID connect (OIDC)","description":"Admin UI of Centrifugo OSS supports only one admin user identified by the preconfigured password. For the corporate and enterprise environments Centrifugo PRO provides a way to integrate with popular User Identity Providers (IDP), such as Okta, KeyCloak, Google Workspace, Azure and others. Most of the modern providers which support OpenID connect (OIDC) protocol with Proof Key for Code Exchange"},"pro/admin_ui":{"id":"pro/admin_ui","title":"Admin UI: SSO, State Snapshots, and more","description":"Admin UI of Centrifugo OSS supports only one admin user identified by the preconfigured password. For the corporate and enterprise environments Centrifugo PRO provides a way to integrate with popular User Identity Providers (IDP), such as Okta, KeyCloak, Google Workspace, Azure and others. Most of the modern providers which support OpenID connect (OIDC) protocol with Proof Key for Code Exchange","sidebar":"Pro"},"pro/analytics":{"id":"pro/analytics","title":"Analytics with ClickHouse","description":"This feature allows exporting information about channel publications, client connections, channel subscriptions,  client operations and push notifications to ClickHouse thus providing an integration with a real-time (with seconds delay) analytics storage. ClickHouse is super fast for analytical queries, simple to operate with and it allows effective data keeping for a window of time. Also, it\'s relatively simple to create a high performance ClickHouse cluster.","sidebar":"Pro"},"pro/bandwidth_optimizations":{"id":"pro/bandwidth_optimizations","title":"Bandwidth optimizations","description":"In high-volume scenarios, bandwidth optimizations can be crucial for reducing network traffic costs and improving performance. Here you can see features of Centrifugo PRO which help optimize bandwidth usage.","sidebar":"Pro"},"pro/capabilities":{"id":"pro/capabilities","title":"Channel capabilities","description":"At this point you know that Centrifugo allows configuring channel permissions on a per-namespace level. When creating a new real-time feature it\'s recommended to create a new namespace for it and configure permissions. To achieve a better channel permission control inside a namespace Centrifugo PRO provides possibility to set capabilities on individual connection basis, or individual channel subscription basis.","sidebar":"Pro"},"pro/cel_expressions":{"id":"pro/cel_expressions","title":"Channel CEL expressions","description":"Centrifugo PRO supports CEL expressions (Common Expression Language) for checking channel operation permissions.","sidebar":"Pro"},"pro/channel_cache_empty":{"id":"pro/channel_cache_empty","title":"Channel cache empty events","description":"Centrifugo PRO can notify the backend when a client subscribes to the channel using cache recovery mode, but there is no latest publication found in the history stream to load the initial state \u2013 i.e. in the case of \\"cache miss\\" event. The backend may react to the event and populate the cache by publishing the current state to the channel.","sidebar":"Pro"},"pro/channel_patterns":{"id":"pro/channel_patterns","title":"Channel patterns","description":"Centrifugo PRO enhances a way to configure channels with Channel Patterns feature. This opens a road for building channel model similar to what developers got used to when writing HTTP servers and configuring routes for HTTP request processing.","sidebar":"Pro"},"pro/channel_state_events":{"id":"pro/channel_state_events","title":"Channel state events","description":"Centrifugo PRO has a feature to enable channel state event webhooks to be sent to your configured backend endpoint:","sidebar":"Pro"},"pro/client_message_batching":{"id":"pro/client_message_batching","title":"Message batching control","description":"Centrifugo PRO provides advanced options to tweak connection message write behaviour.","sidebar":"Pro"},"pro/connections":{"id":"pro/connections","title":"Connections API","description":"Centrifugo PRO offers an extra API call, connections, which enables retrieval of all active sessions (based on user ID or expression) without the need to activate the presence feature for channels. Furthermore, developers can attach any desired JSON payload to a connection that will then be visible in the result of the connections call. It\'s worth noting that this additional meta-information remains hidden from the client-side, unlike the info associated with the connection.","sidebar":"Pro"},"pro/delta_at_most_once":{"id":"pro/delta_at_most_once","title":"Delta compression for at most once scenario","description":"Centrifugo OSS supports delta compression only in channels with recovery and positioning on. To support delta compression for the case when subscribers do not use recovery and positioning Centrifugo PRO provides a boolean namespace option called keeplatest_publication. When it\'s on \u2013 Centrifugo saves latest publication in channels to node\'s memory and uses it to construct delta updates. The publication lives in node\'s memory while there are active channel subscribers. This allows dealing with at most once guarantee of Broker\'s PUB/SUB layer and send deltas properly. So you get efficient at most once broadcast and the reduced bandwidth (of course if delta compression makes sense for data in a channel)."},"pro/distributed_rate_limit":{"id":"pro/distributed_rate_limit","title":"Distributed rate limit API","description":"In addition to connection operation rate limiting features Centrifugo PRO provides a generic high precision rate limiting API. It may be used for custom quota managing tasks not even related to real-time connections. Its distributed nature allows managing quotas across different instances of your application backend."},"pro/install_and_run":{"id":"pro/install_and_run","title":"Install and run PRO version","description":"Centrifugo PRO is distributed by Centrifugal Labs LTD under commercial license which is different from OSS version. By downloading Centrifugo PRO you automatically accept commercial license terms.","sidebar":"Pro"},"pro/namespace_engines":{"id":"pro/namespace_engines","title":"Per-namespace engines","description":"Centrifugo OSS allows specifying an engine. Engine is responsible for PUB/SUB and channel stream/history features (we call this part Broker), and for online presence (this part is called Presence Manager). Engine in Centrifugo OSS is global for the entire Centrifugo setup \u2013 once defined, all channels use it to make operations.","sidebar":"Pro"},"pro/observability_enhancements":{"id":"pro/observability_enhancements","title":"Observability enhancements","description":"Centrifugo PRO version provides an enhanced observability as when the business grows it\'s crucial to have a deep insight into the system.","sidebar":"Pro"},"pro/overview":{"id":"pro/overview","title":"Centrifugo PRO \u267b\ufe0f","description":"Centrifugo PRO is the enhanced version of Centrifugo offered by Centrifugal Labs LTD under a commercial license. It\'s packed with a unique set of features designed to fit requirements of corporate and enterprise environments, decrease costs at scale, and benefit from additional features such as push notifications support, real-time analytics, and so on. We have leveraged our extensive experience to build Centrifugo PRO, ensuring its extra powers are practical and ready for production workloads. See information about pricing and try for free in sandbox mode.","sidebar":"Pro"},"pro/performance":{"id":"pro/performance","title":"Faster performance","description":"Centrifugo PRO has performance improvements for several server parts. These improvements can help to reduce tail end-to-end latencies in the application, increase server throughput and/or reduce CPU usage on server machines. Our open-source version has a decent performance by itself, with PRO improvements Cenrifugo steps even further.","sidebar":"Pro"},"pro/process_stats":{"id":"pro/process_stats","title":"CPU and RSS stats","description":"A useful addition of Centrifugo PRO is an ability to show CPU and RSS memory usage of each node in admin web UI."},"pro/push_notifications":{"id":"pro/push_notifications","title":"Push notification API","description":"Centrifugo excels in delivering real-time in-app messages to online users. Sometimes though you need a way to engage offline users to come back to your app. Or trigger some update in the app while it\'s running in the background. That\'s where push notifications may be used. Push notifications delivered over battery-efficient platform-dependent transport.","sidebar":"Pro"},"pro/rate_limiting":{"id":"pro/rate_limiting","title":"Operation rate limits","description":"The rate limit feature allows limiting the number of operations each connection or user can issue during a configured time interval. This is useful to protect the system from misusing, detecting and disconnecting abusive or broken (due to the bug in the frontend application) clients which add unwanted load on a server.","sidebar":"Pro"},"pro/scalability":{"id":"pro/scalability","title":"Scalability optimizations","description":"Centrifugo PRO comes with several options to reduce load on Engine \u2013 specifically on its history and presence API. This may have a positive effect on CPU resource usage on engine side and a positive effect on operation latencies.","sidebar":"Pro"},"pro/server_api_auth":{"id":"pro/server_api_auth","title":"Server API JWKS auth","description":"Centrifugo PRO supports protecting HTTP API and GRPC API with JWKS (JSON Web Key Set) based authentication. This allows you to use JWT tokens issued by your identity provider (like Keycloak, Auth0, or any other OIDC-compliant provider) to authenticate server API requests.","sidebar":"Pro"},"pro/token_revocation":{"id":"pro/token_revocation","title":"Token revocation API","description":"One more protective instrument in Centrifugo PRO is API to manage token revocations.","sidebar":"Pro"},"pro/tracing":{"id":"pro/tracing","title":"User and channel tracing","description":"That\'s a unique thing. The tracing feature of Centrifugo PRO allows attaching to any channel to see all messages flying towards subscribers or attach to a specific user ID to see all user-related events in real-time.","sidebar":"Pro"},"pro/user_block":{"id":"pro/user_block","title":"User blocking API","description":"One additional instrument for making protective actions in Centrifugo PRO is user blocking API which allows blocking a specific user on Centrifugo level.","sidebar":"Pro"},"pro/user_status":{"id":"pro/user_status","title":"User status API","description":"Centrifugo OSS provides a presence feature for channels. It works well (for channels with reasonably small number of active subscribers though), but sometimes you may need a bit different functionality.","sidebar":"Pro"},"server/admin_web":{"id":"server/admin_web","title":"Admin web UI","description":"Centrifugo comes with a built-in administrative web interface. It enables users to:","sidebar":"Guides"},"server/authentication":{"id":"server/authentication","title":"Client JWT authentication","description":"To securely authenticate incoming real-time client connections, Centrifugo can use a JSON Web Token (JWT) issued by your application backend. This process allows Centrifugo to identify the user\'s ID in your application securely. Additionally, your application can include extra information within the JWT claims, which Centrifugo can then utilize. This chapter will explain how such connection token may be created and used.","sidebar":"Guides"},"server/cache_recovery":{"id":"server/cache_recovery","title":"Cache recovery mode","description":"Cache recovery mode in channels is designed to quickly deliver the most recent (latest) publication as the first event to the subscriber right after subscription request. This functionality allows Centrifugo channels to behave as a real-time key-value store. The feature is available since Centrifugo v5.4.0.","sidebar":"Guides"},"server/channel_permissions":{"id":"server/channel_permissions","title":"Channel permission model","description":"When using Centrifugo server API you don\'t need to think about channel permissions at all \u2013 everything is allowed. In server API case, request to Centrifugo must be issued by your application backend \u2013 so you have all the power to check any required permissions before issuing API request to Centrifugo.","sidebar":"Guides"},"server/channel_token_auth":{"id":"server/channel_token_auth","title":"Channel JWT authorization","description":"In the chapter about channel permissions we mentioned that to subscribe on a channel client can provide subscription token. This chapter has more information about the subscription token mechanism in Centrifugo.","sidebar":"Guides"},"server/channels":{"id":"server/channels","title":"Channels and namespaces","description":"Centrifugo operates on a PUB/SUB model. Upon connecting to a server, clients can subscribe to channels. A channel is one of the core concepts of Centrifugo. Most of the time when integrating Centrifugo, you will work with channels and determine the optimal channel configuration for your application.","sidebar":"Guides"},"server/codes":{"id":"server/codes","title":"Client protocol codes","description":"This chapter describes codes of errors, unsubscribes and disconnects from Centrifugo in a client protocol, also error codes which a server API can return in the response.","sidebar":"Guides"},"server/configuration":{"id":"server/configuration","title":"Configure Centrifugo","description":"Centrifugo can start without any configuration \u2013 it runs out-of-the-box with enabled HTTP API endpoint and enabled WebSocket transport endpoint for client real-time connections. In most cases though, you still need to configure it to set authorization options for HTTP API, connection JWT authentication, or maybe authentication over connect proxy, describe the desired channel behaviour, and so on.","sidebar":"Guides"},"server/console_commands":{"id":"server/console_commands","title":"Helper CLI commands","description":"Here is a list of helpful built-in command-line commands that come with centrifugo executable.","sidebar":"Guides"},"server/consumers":{"id":"server/consumers","title":"Built-in API command async consumers","description":"In server API chapter we\'ve shown how to execute various Centrifugo server API commands (publish, broadcast, etc.) over HTTP or GRPC. In many cases you will call those APIs from your application business logic synchronously. But to deal with temporary network and availability issues, and achieve reliable execution of API commands upon changes in your primary application database you may want to use queuing techniques and call Centrifugo API asynchronously.","sidebar":"Guides"},"server/delta_compression":{"id":"server/delta_compression","title":"Delta compression in channels","description":"Delta compression feature allows a client to subscribe to a channel in a way so that message payloads contain only the differences between the current message and the previous one sent on the channel.","sidebar":"Guides"},"server/engines":{"id":"server/engines","title":"Engines and scalability","description":"In this chapter we talk about central part of each Centrifugo server node \u2013 Engine, which consists of two parts \u2013 Broker and Presence Manager. These parts provide core functionality and the scalability properties of core Centrifugo channel-related features. For ease of use Centrifugo allows configuring the entire engine as a single entity or to specify Broker and Presence Manager separately for more flexibility.","sidebar":"Guides"},"server/history_and_recovery":{"id":"server/history_and_recovery","title":"History and stream recovery","description":"Centrifugo engines can maintain publication history for channels with configured history size and TTL.","sidebar":"Guides"},"server/infra_tuning":{"id":"server/infra_tuning","title":"Infrastructure tuning","description":"Since Centrifugo deals with lots of persistent connections your operating system and server infrastructure must be ready for it too.","sidebar":"Guides"},"server/load_balancing":{"id":"server/load_balancing","title":"Load balancing","description":"This chapter shows how to deal with persistent connection load balancing.","sidebar":"Guides"},"server/monitoring":{"id":"server/monitoring","title":"Metrics monitoring","description":"Centrifugo supports reporting metrics in Prometheus format and can automatically export metrics to Graphite."},"server/observability":{"id":"server/observability","title":"Server observability","description":"To provide a better server observability Centrifugo supports reporting metrics in Prometheus format and can automatically export metrics to Graphite.","sidebar":"Guides"},"server/presence":{"id":"server/presence","title":"Online presence","description":"The online presence feature in Centrifugo is a powerful tool for monitoring and managing active users within a specific channel. It provides a real-time view of users currently subscribed to that channel. Additionally, Centrifugo can emit join and leave events to all channel subscribers whenever clients subscribe to or unsubscribe from a channel, allowing you to track user activity more effectively.","sidebar":"Guides"},"server/proxy":{"id":"server/proxy","title":"Proxy events to the backend","description":"Due to its self-hosted nature, Centrifugo can offer an efficient way to proxy client connection events to your application backend, enabling the backend to respond to client connection requests in a customized manner. In other words, this mechanism allows Centrifugo to send (web)hooks to the backend to control the behavior of real-time connections.","sidebar":"Guides"},"server/proxy_streams":{"id":"server/proxy_streams","title":"Proxy subscription streams","description":"This is an experimental extension of Centrifugo proxy. We appreciate your feedback to make sure it\'s useful and solves real-world problems before marking it as stable and commit to the API.","sidebar":"Guides"},"server/publication_filtering":{"id":"server/publication_filtering","title":"Channel publication filtering","description":"Publication filtering allows clients to subscribe to a channel with a filter, ensuring that only publications with tags matching the specified criteria are delivered to the subscriber. This feature can significantly reduce bandwidth usage and minimize client-side processing overhead by filtering out irrelevant messages at the server level.","sidebar":"Guides"},"server/server_api":{"id":"server/server_api","title":"Server API walkthrough","description":"Server API provides various methods to interact with Centrifugo from your application backend. Specifically, in most cases server API this is an entrypoint for publications into channels (see publish method). It also allows getting information about Centrifugo cluster, disconnect users, extract channel online presence information, channel history, and so on.","sidebar":"Guides"},"server/server_subs":{"id":"server/server_subs","title":"Server-side subscriptions","description":"Centrifugo clients can initiate a subscription to a channel by calling the subscribe method of client API. We call it client-side subscriptions. In most cases, client-side subscriptions is a flexible and recommended approach to subscribe to channels. A frontend usually knows which channels it needs to consume at a concrete moment.","sidebar":"Guides"},"server/tls":{"id":"server/tls","title":"Configure TLS","description":"TLS/SSL layer is very important not only for securing your connections but also to increase a"},"transports/client_api":{"id":"transports/client_api","title":"Client SDK specification","description":"Centrifugo has several client SDKs to establish a real-time connection with a server. Centrifugo SDKs use WebSocket as the main data transport and send/receive messages encoded according to our bidirectional protocol. That protocol is built on top of the Protobuf schema (both JSON and binary Protobuf formats are supported). It provides asynchronous communication, sending RPC, multiplexing subscriptions to channels, etc. Client SDK wraps the protocol and exposes a set of APIs to developers.","sidebar":"Transports"},"transports/client_protocol":{"id":"transports/client_protocol","title":"Client protocol","description":"This chapter describes the core concepts of Centrifugo bidirectional client protocol \u2013 concentrating on framing level. If you want to find out details about exposed client API then look at client API document.","sidebar":"Transports"},"transports/client_sdk":{"id":"transports/client_sdk","title":"Client real-time SDKs","description":"In the previous chapter we investigated common principles of Centrifugo client SDK API. Here we will provide a list of available bidirectional connectors you can use to communicate with Centrifugo.","sidebar":"Transports"},"transports/http_stream":{"id":"transports/http_stream","title":"HTTP streaming, with bidirectional emulation","description":"HTTP streaming is a technique based on using a long-lived HTTP connection between a client and a server with a chunked transfer encoding. Usually it only allows unidirectional flow of messages from server to client but with Centrifugo bidirectional emulation layer it may be used as a full-featured fallback or alternative to WebSocket.","sidebar":"Transports"},"transports/overview":{"id":"transports/overview","title":"Real-time transports","description":"Centrifugo supports a variety of transports to deliver real-time messages to clients.","sidebar":"Transports"},"transports/sockjs":{"id":"transports/sockjs","title":"SockJS","description":"SockJS transport was REMOVED in Centrifugo v6."},"transports/sse":{"id":"transports/sse","title":"Server-Sent Events (SSE), with bidirectional emulation","description":"Server-Sent Events or EventSource is a well-known HTTP-based transport available in all modern browsers and loved by many developers. It\'s unidirectional in its nature but with Centrifugo bidirectional emulation layer it may be used as a fallback or alternative to WebSocket.","sidebar":"Transports"},"transports/uni_client_protocol":{"id":"transports/uni_client_protocol","title":"Unidirectional client protocol","description":"As mentioned earlier, you can bypass the need for Centrifugo bidirectional real-time SDKs by opting for the unidirectional approach. By using unidirectional Centrifugo transports, you can harness the power of native browser APIs while still benefiting of Centrifugo features, including efficient subscription multiplexing, scalability, a ready-to-use publication API, and more. This approach allows you to introduce real-time features with minimal dependencies on the client side, still having scalable and efficient real-time backend.","sidebar":"Transports"},"transports/uni_grpc":{"id":"transports/uni_grpc","title":"Unidirectional GRPC","description":"It\'s possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side.","sidebar":"Transports"},"transports/uni_http_stream":{"id":"transports/uni_http_stream","title":"Unidirectional HTTP streaming","description":"HTTP streaming is a technique based on using a long-lived HTTP connection between a client and a server with a chunked transfer encoding. These days it\'s possible to use it from the web browser using modern Fetch and Readable Streams API. See example below.","sidebar":"Transports"},"transports/uni_sse":{"id":"transports/uni_sse","title":"Unidirectional Server-Sent Events (SSE)","description":"Server-Sent Events or EventSource is a well-known HTTP-based transport available in all modern browsers (over EventSource object) and loved by many developers due to its simplicity.","sidebar":"Transports"},"transports/uni_websocket":{"id":"transports/uni_websocket","title":"Unidirectional WebSocket","description":"While WebSocket is bidirectional transport in its nature Centrifugo provides its unidirectional version too to give developers more choice in transports when using the unidirectional approach.","sidebar":"Transports"},"transports/websocket":{"id":"transports/websocket","title":"WebSocket","description":"Websocket is the main transport in Centrifugo. It\'s a very efficient low-overhead protocol on top of TCP. Websocket works out of the box in all modern browsers and almost all programming languages have Websocket implementations. This makes Websocket an efficient universal real-time transport which can be used to connect to Centrifugo from almost everywhere.","sidebar":"Transports"},"transports/webtransport":{"id":"transports/webtransport","title":"WebTransport","description":"WebTransport is an API offering low-latency, bidirectional, client-server messaging on top of HTTP/3 (with QUIC under the hood). See Using WebTransport article that gives a good overview of it.","sidebar":"Transports"},"tutorial/backend":{"id":"tutorial/backend","title":"Setting up backend and database","description":"Let\'s start building the app. As the first step, create a directory for the new app:","sidebar":"Tutorial"},"tutorial/centrifugo":{"id":"tutorial/centrifugo","title":"Integrating Centrifugo for real-time event delivery","description":"It\'s finally time for the real-time! In some cases you already have an application and when integrating Centrifugo you start from here.","sidebar":"Tutorial"},"tutorial/frontend":{"id":"tutorial/frontend","title":"Creating SPA frontend with React","description":"On the frontend we will use Vite with React and Typescript. In this tutorial we are not paying a lot of attention to making all the types strict and using any a lot. Which is actually a point for improvement, but at least helps to make the tutorial slightly shorter. The prerequisites is NodeJS >= 18.","sidebar":"Tutorial"},"tutorial/improvements":{"id":"tutorial/improvements","title":"Appendix #1: Possible Improvements","description":"There are still many areas for improvement in GrandChat, but we had to halt at a certain point to prevent the tutorial from becoming a book. If you enjoyed the tutorial and wish to enhance GrandChat further, here are some bright ideas:","sidebar":"Tutorial"},"tutorial/intro":{"id":"tutorial/intro","title":"Building WebSocket chat (messenger) app from scratch","description":"In this tutorial, we show how to build a rather complex real-time application with Centrifugo. It features a modern and responsive frontend, user authentication, channel permission checks, and the main database as a source of truth.","sidebar":"Tutorial"},"tutorial/layout":{"id":"tutorial/layout","title":"App layout and behavior","description":"Before we start, we would like the reader to be more familiar with the layout and behavior of the application we are creating here. Let\'s look at it screen by screen, describe the behavior, and explain which parts will be endowed with real-time superpowers.","sidebar":"Tutorial"},"tutorial/monitoring":{"id":"tutorial/monitoring","title":"Appendix #3: Adding Prometheus and Grafana","description":"Let\'s move a bit further and show how to add Centrifugo monitoring to our messenger application. We will use Prometheus and Grafana for this.","sidebar":"Tutorial"},"tutorial/outbox_cdc":{"id":"tutorial/outbox_cdc","title":"Broadcast using transactional outbox and CDC","description":"Some of you may notice one potential issue which could prevent event delivery to users when publishing messages to Centrifugo API. Since we do this after a transaction and via a network call (in our case, using HTTP), it means the broadcast API call may return an error.","sidebar":"Tutorial"},"tutorial/outro":{"id":"tutorial/outro","title":"Wrapping up \u2013 things learnt","description":"At this point, we have a working real-time app, so the tutorial comes to an end. We\'ve covered some concepts of Centrifugo, such as:","sidebar":"Tutorial"},"tutorial/push_notifications":{"id":"tutorial/push_notifications","title":"Appendix #4: Adding push notifications","description":"This chapter is under construction.","sidebar":"Tutorial"},"tutorial/recovery":{"id":"tutorial/recovery","title":"Missed messages recovery","description":"At this point, we already have a real-time application with the instant delivery of events to interested messenger users. Now, let\'s focus on ensuring reliable message delivery. The first step would be enabling Centrifugo\'s automatic message recovery for personal channels.","sidebar":"Tutorial"},"tutorial/reverse_proxy":{"id":"tutorial/reverse_proxy","title":"Adding Nginx as a reverse proxy","description":"As mentioned, we are building a single-page frontend application here, and the frontend will be completely decoupled from the backend. This separation is advantageous because Centrifugo users can theoretically swap only the backend or frontend components while following this tutorial. For example, one could keep the frontend part but attempt to implement the backend in Laravel, Rails, or another framework.","sidebar":"Tutorial"},"tutorial/scale":{"id":"tutorial/scale","title":"Scale to 100k cats in room","description":"Congratulations \u2013 we\'ve built an awesome app and we are done with the development within this tutorial! \ud83c\udf89","sidebar":"Tutorial"},"tutorial/tips_and_tricks":{"id":"tutorial/tips_and_tricks","title":"Appendix #2: Tips and tricks","description":"Making this tutorial took quite a lot of time for us. We want to collect some useful tips and tricks here for those who decide to play with the final example. Feel free to contribute if you find something which could help others.","sidebar":"Tutorial"}}}}')}}]);