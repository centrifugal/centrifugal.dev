"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[8630],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(96540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},30574:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"pro/channel_patterns","title":"Channel patterns","description":"This PRO feature is under active development, some changes expected here \ud83d\udea7","source":"@site/versioned_docs/version-4/pro/channel_patterns.md","sourceDirName":"pro","slug":"/pro/channel_patterns","permalink":"/docs/4/pro/channel_patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-4/pro/channel_patterns.md","tags":[],"version":"4","frontMatter":{"id":"channel_patterns","sidebar_label":"Channel patterns","title":"Channel patterns"},"sidebar":"Pro","previous":{"title":"Channel capabilities","permalink":"/docs/4/pro/capabilities"},"next":{"title":"CEL expressions","permalink":"/docs/4/pro/cel_expressions"}}');var s=t(74848),i=t(28453);const r={id:"channel_patterns",sidebar_label:"Channel patterns",title:"Channel patterns"},l=void 0,o={},c=[{value:"Configuration",id:"configuration",level:3},{value:"Implementation details",id:"implementation-details",level:3},{value:"Variables",id:"variables",level:3},{value:"Using varibles",id:"using-varibles",level:3}];function h(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This PRO feature is under active development, some changes expected here \ud83d\udea7"}),"\n",(0,s.jsx)(n.p,{children:"Centrifugo PRO enhances a way to configure channels with Channel Patterns feature. This opens a road for building channel model similar to what developers got used to when writing HTTP servers and configuring routes for HTTP request processing."}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Let's look at the example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    // rest of the config ...\n    "channel_patterns": true, // required to turn on the feature.\n    "namespaces": [\n        {\n            "name": "/users/:name"\n            // namespace options may go here ...\n        },\n        {\n            "name": "/events/:project/:type"\n            // namespace options may go here ...\n        }\n    ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As soon as namespace name starts with ",(0,s.jsx)(n.code,{children:"/"})," - it's considered a channel pattern. Just like an HTTP path it consists of segments delimited by ",(0,s.jsx)(n.code,{children:"/"}),". The ",(0,s.jsx)(n.code,{children:":"})," symbol in the segment beginning defines a variable part \u2013 more information below."]}),"\n",(0,s.jsxs)(n.p,{children:["In this case a channel to be used must be sth like ",(0,s.jsx)(n.code,{children:"/users/mario"})," - i.e. start with ",(0,s.jsx)(n.code,{children:"/"})," and match one of the patterns defined in the configuration. So this channel pattern matching mechanics behaves mostly like HTTP route matching in many frameworks."]}),"\n",(0,s.jsx)(n.p,{children:"Given the configuration example above:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["if channel is ",(0,s.jsx)(n.code,{children:"/users/mario"}),", then the namespace with the name ",(0,s.jsx)(n.code,{children:"/users/:name"})," will match and we apply all the options defined for it to the channel."]}),"\n",(0,s.jsxs)(n.li,{children:["if channel is ",(0,s.jsx)(n.code,{children:"/events/42/news"}),", then the namespace with the name ",(0,s.jsx)(n.code,{children:"/events/:project/:type"})," will match."]}),"\n",(0,s.jsxs)(n.li,{children:["if channel is ",(0,s.jsx)(n.code,{children:"/events/42"}),", then no namespace will match and the ",(0,s.jsx)(n.code,{children:"unknown channel"})," error will be returned."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="Basic example demonstrating use of pattern channels in JS"',children:"const client := new Centrifuge(\"ws://...\", {});\nconst sub = client.newSubscription('/users/mario');\nsub.subscribe();\nclient.connect();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"implementation-details",children:"Implementation details"}),"\n",(0,s.jsx)(n.p,{children:"Some implementation restrictions and details to know about:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When using channel patterns feature ",(0,s.jsx)(n.code,{children:":"})," symbol in a namespace name defines a variable part. It's not related to a namespace separator anymore \u2013 the entire channel is matched over the channel pattern. Similar to the HTTP routes semantics. So namespace separator is not needed at all when using channel patterns."]}),"\n",(0,s.jsx)(n.li,{children:"Centrifugo only allows explicit channel pattern matching which do not result into channel pattern conflicts in runtime, this is checked during configuration validation on server start. Explicitly defined static patterns (without variables) have precedence over patterns with variables."}),"\n",(0,s.jsxs)(n.li,{children:["There is no analogue of top-level namespace (like we have for standard namespace configuration) for channels starting with ",(0,s.jsx)(n.code,{children:"/"}),". If a channel does not match any explicitly defined pattern then Centrifugo returns the ",(0,s.jsx)(n.code,{children:"102: unknown channel"})," error."]}),"\n",(0,s.jsxs)(n.li,{children:["If you define ",(0,s.jsx)(n.code,{children:"channel_regex"})," inside channel pattern options \u2013 then regex matches over the entire channel (since variable parts are located in the namespace name in this case)."]}),"\n",(0,s.jsx)(n.li,{children:"Channel pattern must only contain ASCII characters."}),"\n",(0,s.jsxs)(n.li,{children:["Duplicate variable names are not allowed inside an individual pattern, i.e. defining ",(0,s.jsx)(n.code,{children:"/users/:user/:user"})," will result into validation error on start."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:":"})," in the channel pattern name helps to define a variable to match against. Named parameters only match a single segment of the channel:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Channel pattern "/users/:name":\n\n/users/mary         \u2705 match\n/users/john         \u2705 match\n/users/mary/info    \u274c no match \n/users              \u274c no match\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Another example for channel pattern ",(0,s.jsx)(n.code,{children:"/news/:type/:subtype"}),", i.e. with multiple variables:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Channel pattern "/news/:type/:subtype":\n\n/news/sport/football       \u2705 match\n/news/sport/volleyball     \u2705 match\n/news/sport                \u274c no match\n/news                      \u274c no match\n'})}),"\n",(0,s.jsx)(n.p,{children:"Channel patterns support mid-segment variables, so the following is possible:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Channel pattern "/personal/user_:user":\n\n/personal/user_mary     \u2705 match\n/personal/user_john     \u2705 match\n/personal/user_         \u274c no match\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using-varibles",children:"Using varibles"}),"\n",(0,s.jsxs)(n.p,{children:["Additional benefits of using channel patterns may be achieved together with Centrifugo PRO ",(0,s.jsx)(n.a,{href:"/docs/4/pro/cel_expressions",children:"CEL expressions"}),". Channel pattern variables are available inside CEL expressions for evaluation in a custom way."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);