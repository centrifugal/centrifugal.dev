"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[3369],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}},47604:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"pro/user_block","title":"User blocking API","description":"In addition to detailed observability properties Centrifugo PRO provides instruments for performing protective actions. One of such instruments is user blocking API which allows blocking a specific user in Centrifugo.","source":"@site/versioned_docs/version-3/pro/user_block.md","sourceDirName":"pro","slug":"/pro/user_block","permalink":"/docs/3/pro/user_block","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-3/pro/user_block.md","tags":[],"version":"3","frontMatter":{"id":"user_block","title":"User blocking API"},"sidebar":"Pro","previous":{"title":"User connections API","permalink":"/docs/3/pro/user_connections"},"next":{"title":"Token revocation API","permalink":"/docs/3/pro/token_revocation"}}');var i=s(74848),t=s(28453);const o={id:"user_block",title:"User blocking API"},l=void 0,a={},c=[{value:"How it works",id:"how-it-works",level:2},{value:"Configure",id:"configure",level:2},{value:"Redis persistence engine",id:"redis-persistence-engine",level:3},{value:"Database persistence engine",id:"database-persistence-engine",level:3},{value:"Block user API",id:"block-user-api",level:2},{value:"Block user params",id:"block-user-params",level:4},{value:"Block user result",id:"block-user-result",level:4},{value:"Unblock user API",id:"unblock-user-api",level:2},{value:"Unblock user params",id:"unblock-user-params",level:4},{value:"Unblock user result",id:"unblock-user-result",level:4}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In addition to detailed observability properties Centrifugo PRO provides instruments for performing protective actions. One of such instruments is user blocking API which allows blocking a specific user in Centrifugo."}),"\n",(0,i.jsx)(n.p,{children:"When user is blocked it will be disconnected from Centrifugo immediately and also on the next connect attempt right after JWT decoded (so that Centrifugo got a user ID) or after result from connect proxy received. In case of using connect proxy you can actually disconnect user yourself by implementing blocking check on the application backend side \u2013 but possibility to block user in Centrifugo can still be helpful."}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,i.jsx)(n.p,{children:"By default, information about user block/unblock requests shared throughout Centrifugo cluster and kept in memory. So user will be blocked until Centrifugo restart."}),"\n",(0,i.jsx)(n.p,{children:"But it's possible to enable blocking information persistence by configuring a persistence storage \u2013 in this case information will survive Centrifugo restarts."}),"\n",(0,i.jsx)(n.p,{children:"Centrifugo also automatically expires entries in the storage to keep working set of blocked users reasonably small. Keeping pool of blocked users small allows avoiding expensive database lookups on every check \u2013 information is loaded periodically from the storage and all checks performed over in-memory data structure \u2013 thus user blocking checks are cheap and have a small impact on the overall system performance."}),"\n",(0,i.jsx)(n.h2,{id:"configure",children:"Configure"}),"\n",(0,i.jsx)(n.p,{children:"User block feature is enabled by default in Centrifugo PRO (blocking information will be stored in process memory). To keep blocking information persistently you need to configure persistence engine."}),"\n",(0,i.jsx)(n.p,{children:"There are two types of persistent engines supported at the moment:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"redis"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"database"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"redis-persistence-engine",children:"Redis persistence engine"}),"\n",(0,i.jsx)(n.p,{children:"Blocking data can be kept in Redis. To enable this configuration should be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    ...\n    "user_block": {\n        "persistence_engine": "redis",\n        "redis_address": "localhost:6379"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["Unlike many other Redis features in Centrifugo consistent sharding is not supported for blocking data. The reason is that we don't want to loose blocking information when additional Redis node added. So only one Redis shard can be provided for ",(0,i.jsx)(n.code,{children:"user_block"})," feature. This should be fine given that working set of blocked users should be reasonably small and old entries expire. If you try to set several Redis shards here Centrifugo will exit with an error on start."]})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["One more thing you may notice is that Redis configuration here does not have ",(0,i.jsx)(n.code,{children:"use_redis_from_engine"})," option. The reason is that since Redis is not shardable here reusing Redis configuration here could cause problems at the moment of Redis scaling \u2013 which we want to avoid thus require explicit configuration here."]})}),"\n",(0,i.jsx)(n.h3,{id:"database-persistence-engine",children:"Database persistence engine"}),"\n",(0,i.jsx)(n.p,{children:"Blocking data can be kept in the relational database. Only PostgreSQL is supported."}),"\n",(0,i.jsx)(n.p,{children:"To enable this configuration should be like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    ...\n    "database": {\n        "dsn": "postgresql://postgres:pass@127.0.0.1:5432/postgres"\n    },\n    "user_block": {\n        "persistence_engine": "database"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"block-user-api",children:"Block user API"}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl --header "Content-Type: application/json" \\\n  --header "Authorization: apikey <API_KEY>" \\\n  --request POST \\\n  --data \'{"method": "block_user", "params": {"user": "2695", "expire_at": 1635845122}}\' \\\n  http://localhost:8000/api\n'})}),"\n",(0,i.jsx)(n.h4,{id:"block-user-params",children:"Block user params"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter name"}),(0,i.jsx)(n.th,{children:"Parameter type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"user"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"yes"}),(0,i.jsx)(n.td,{children:"User ID to block"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"expire_at"}),(0,i.jsx)(n.td,{children:"int"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsxs)(n.td,{children:["Unix time in the future when user blocking information should expire (Unix seconds). While optional ",(0,i.jsx)(n.strong,{children:"we recommend to use a reasonably small expiration time"})," to keep working set of blocked users small (since Centrifugo nodes periodically load all entries from the storage to construct in-memory cache)."]})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"block-user-result",children:"Block user result"}),"\n",(0,i.jsx)(n.p,{children:"Empty object at the moment."}),"\n",(0,i.jsx)(n.h2,{id:"unblock-user-api",children:"Unblock user API"}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl --header "Content-Type: application/json" \\\n  --header "Authorization: apikey <API_KEY>" \\\n  --request POST \\\n  --data \'{"method": "unblock_user", "params": {"user": "2695"}}\' \\\n  http://localhost:8000/api\n'})}),"\n",(0,i.jsx)(n.h4,{id:"unblock-user-params",children:"Unblock user params"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter name"}),(0,i.jsx)(n.th,{children:"Parameter type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"user"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"yes"}),(0,i.jsx)(n.td,{children:"User ID to unblock"})]})})]}),"\n",(0,i.jsx)(n.h4,{id:"unblock-user-result",children:"Unblock user result"}),"\n",(0,i.jsx)(n.p,{children:"Empty object at the moment."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);