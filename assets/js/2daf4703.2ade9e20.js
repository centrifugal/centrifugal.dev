"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[1520],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(96540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},97569:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"transports/uni_sse","title":"Unidirectional Server-Sent Events (SSE)","description":"Server-Sent Events or EventSource is a well-known HTTP-based transport available in all modern browsers (over EventSource object) and loved by many developers due to its simplicity.","source":"@site/docs/transports/uni_sse.md","sourceDirName":"transports","slug":"/transports/uni_sse","permalink":"/docs/transports/uni_sse","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/transports/uni_sse.md","tags":[],"version":"current","frontMatter":{"id":"uni_sse","title":"Unidirectional Server-Sent Events (SSE)","sidebar_label":"Server-Sent Events (SSE)"},"sidebar":"Transports","previous":{"title":"HTTP streaming","permalink":"/docs/transports/uni_http_stream"},"next":{"title":"GRPC","permalink":"/docs/transports/uni_grpc"}}');var o=s(74848),r=s(28453);const i={id:"uni_sse",title:"Unidirectional Server-Sent Events (SSE)",sidebar_label:"Server-Sent Events (SSE)"},a=void 0,c={},l=[{value:"How to enable",id:"how-to-enable",level:2},{value:"Default endpoint",id:"default-endpoint",level:2},{value:"Send connect request",id:"send-connect-request",level:2},{value:"Supported data formats",id:"supported-data-formats",level:2},{value:"Ping",id:"ping",level:2},{value:"<code>uni_sse</code>",id:"uni_sse",level:2},{value:"<code>uni_sse.enabled</code>",id:"uni_sseenabled",level:3},{value:"<code>uni_sse.max_request_body_size</code>",id:"uni_ssemax_request_body_size",level:3},{value:"Browser example",id:"browser-example",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/EventSource",children:"Server-Sent Events or EventSource"})," is a well-known HTTP-based transport available in all modern browsers (over ",(0,o.jsx)(n.code,{children:"EventSource"})," object) and loved by many developers due to its simplicity."]}),"\n",(0,o.jsx)(n.h2,{id:"how-to-enable",children:"How to enable"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:"title=config.json",children:'{\n  "uni_sse": {\n    "enabled": true\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"default-endpoint",children:"Default endpoint"}),"\n",(0,o.jsx)(n.p,{children:"Default unidirectional SSE (EventSource) connection endpoint in Centrifugo is:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"/connection/uni_sse\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Only parts of EventSource spec that make sense for Centrifugo are implemented. For example ",(0,o.jsx)(n.code,{children:"Last-Event-Id"})," header not supported (since one connection can be subscribed to many channels) and multiline strings (since we are passing JSON-encoded objects to the client) etc."]})}),"\n",(0,o.jsx)(n.h2,{id:"send-connect-request",children:"Send connect request"}),"\n",(0,o.jsxs)(n.p,{children:["Unfortunately SSE specification does not allow POST requests from a web browser, so the only way to pass initial connect command is over URL params. Centrifugo is looking for ",(0,o.jsx)(n.code,{children:"cf_connect"})," URL param for connect command. Connect command value expected to be a JSON-encoded string, properly encoded into URL. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const url = new URL('http://localhost:8000/connection/uni_sse');\nurl.searchParams.append(\"cf_connect\", JSON.stringify({\n    'token': '<JWT>'\n}));\n\nconst eventSource = new EventSource(url);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Refer to the full ",(0,o.jsx)(n.a,{href:"/docs/transports/uni_client_protocol#connectrequest",children:"connect request description"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The length of URL query should be kept less than 2048 characters to work throughout browsers. This should be more than enough for most use cases."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Centrifugo unidirectional SSE endpoint also supports POST requests. While it's not very useful for browsers which only allow GET requests for EventSource this can be useful when connecting from a mobile device. In this case you must send the connect object as a JSON body of a POST request (instead of using ",(0,o.jsx)(n.code,{children:"cf_connect"})," URL parameter), similar to what we have in unidirectional HTTP streaming transport case."]})}),"\n",(0,o.jsx)(n.h2,{id:"supported-data-formats",children:"Supported data formats"}),"\n",(0,o.jsx)(n.p,{children:"JSON"}),"\n",(0,o.jsx)(n.h2,{id:"ping",children:"Ping"}),"\n",(0,o.jsxs)(n.p,{children:["SSE data frame with ",(0,o.jsx)(n.code,{children:"{}"})," is used as a ping."]}),"\n",(0,o.jsx)(n.p,{children:"For example, see how unidirectional SSE session may look like after initial establishment and which only receives periodic pings:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'\u276f curl http://localhost:8000/connection/uni_sse\n\ndata: {"connect":{"client":"c09d1965...","version":"0.0.0 OSS","subs":{"#2694":{}},"ping":25,"session":"1cf6d9f5..."}}\n\ndata: {}\n\ndata: {}\n\ndata: {}\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"uni_sse",children:(0,o.jsx)(n.code,{children:"uni_sse"})}),"\n",(0,o.jsx)(n.h3,{id:"uni_sseenabled",children:(0,o.jsx)(n.code,{children:"uni_sse.enabled"})}),"\n",(0,o.jsxs)(n.p,{children:["Boolean, default: ",(0,o.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Enables unidirectional SSE (EventSource) endpoint."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "uni_sse": {\n        "enabled": true\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"uni_ssemax_request_body_size",children:(0,o.jsx)(n.code,{children:"uni_sse.max_request_body_size"})}),"\n",(0,o.jsx)(n.p,{children:"Default: 65536 (64KB)"}),"\n",(0,o.jsx)(n.p,{children:"Maximum allowed size of a initial HTTP POST request in bytes when using HTTP POST requests to connect (browsers are using GET so it's not applied)."}),"\n",(0,o.jsx)(n.h2,{id:"browser-example",children:"Browser example"}),"\n",(0,o.jsx)(n.p,{children:"Here is an example of how to connect to Centrifugo unidirectional SSE endpoint from a browser:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const url = new URL('http://localhost:8000/connection/uni_sse');\nurl.searchParams.append(\"cf_connect\", JSON.stringify({\n    'token': '<Centrifugo JWT>'\n}))\nconst eventSource = new EventSource(url);\neventSource.onmessage = function(event) {\n    console.log(event.data);\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For a more complete unidirectional SSE example with a simple backend and JWT auth see ",(0,o.jsx)(n.a,{href:"https://github.com/centrifugal/examples/tree/master/v6/unidirectional_sse",children:"this example"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["As always, if you are using ",(0,o.jsx)(n.a,{href:"/docs/server/proxy#connect-proxy",children:"connect proxy"})," \u2013 then you can go without JWT for authentication. Same concepts as for bidirectional connection here."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);