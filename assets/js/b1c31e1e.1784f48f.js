"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[7170],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(96540);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}},36941:e=>{e.exports=JSON.parse('{"permalink":"/blog/2024/06/03/real-time-document-state-sync","editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/blog/2024-06-03-real-time-document-state-sync.md","source":"@site/blog/2024-06-03-real-time-document-state-sync.md","title":"Proper real-time document state synchronization within Centrifugal ecosystem","description":"A simple yet cool example of document state synchronization on top of Centrifugal stack. The end goal is to effectively and reliably synchronize document state to application users \u2013 to avoid race condition between state load and updates coming from the real-time subscription.","date":"2024-06-03T00:00:00.000Z","tags":[{"inline":true,"label":"centrifugo","permalink":"/blog/tags/centrifugo"},{"inline":true,"label":"centrifuge","permalink":"/blog/tags/centrifuge"},{"inline":true,"label":"websocket","permalink":"/blog/tags/websocket"},{"inline":true,"label":"docsync","permalink":"/blog/tags/docsync"}],"readingTime":11.02,"hasTruncateMarker":true,"authors":[{"name":"Alexander Emelin","title":"Founder of Centrifugal Labs","imageURL":"/img/alexander_emelin.jpeg","key":null,"page":null}],"frontMatter":{"title":"Proper real-time document state synchronization within Centrifugal ecosystem","tags":["centrifugo","centrifuge","websocket","docsync"],"description":"A simple yet cool example of document state synchronization on top of Centrifugal stack. The end goal is to effectively and reliably synchronize document state to application users \u2013 to avoid race condition between state load and updates coming from the real-time subscription.","author":"Alexander Emelin","authorTitle":"Founder of Centrifugal Labs","authorImageURL":"/img/alexander_emelin.jpeg","image":"/img/docsync_cover.jpg","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Performance optimizations of WebSocket compression in Go application","permalink":"/blog/2024/08/19/optimizing-websocket-compression"},"nextItem":{"title":"Experimenting with real-time data compression by simulating a football match events","permalink":"/blog/2024/05/30/real-time-data-compression-experiments"}}')},98320:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var o=n(36941),i=n(74848),a=n(28453);const r={title:"Proper real-time document state synchronization within Centrifugal ecosystem",tags:["centrifugo","centrifuge","websocket","docsync"],description:"A simple yet cool example of document state synchronization on top of Centrifugal stack. The end goal is to effectively and reliably synchronize document state to application users \u2013 to avoid race condition between state load and updates coming from the real-time subscription.",author:"Alexander Emelin",authorTitle:"Founder of Centrifugal Labs",authorImageURL:"/img/alexander_emelin.jpeg",image:"/img/docsync_cover.jpg",hide_table_of_contents:!1},s=void 0,c={authorsImageUrls:[void 0]},l=[];function m(e){const t={p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("img",{src:"/img/docsync_cover.jpg"}),"\n",(0,i.jsx)(t.p,{children:"Centrifugo and its main building block Centrifuge library for Go both provide a way for clients to receive a stream of events in channels using Subscription objects. Also, there is an automatic history recovery feature which allows clients catching up with missed publications after the reconnect to the WebSocket server and restore the state of a real-time component. While the continuity in the stream is not broken clients can avoid re-fetching a state from the main application database \u2013 which optimizes a scenario when many real-time connections reconnect all within a short time interval (for example, during a load balancer restart) by reducing the excessive load on the application database."})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);