"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[2735],{17508:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var n=i(85893),o=i(11151);const r={title:"Improving Centrifugo Redis Engine throughput and allocation efficiency with Rueidis Go library",tags:["centrifugo","redis","go"],description:"In this post we share some details about Centrifugo Redis Engine implementation and its recent performance improvements with the help of Rueidis Go library",author:"Alexander Emelin",authorTitle:"Author of Centrifugo",authorImageURL:"https://github.com/FZambia.png",image:"/img/redis_cover.png",hide_table_of_contents:!1},s=void 0,a={permalink:"/blog/2022/12/20/improving-redis-engine-performance",editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/blog/2022-12-20-improving-redis-engine-performance.md",source:"@site/blog/2022-12-20-improving-redis-engine-performance.md",title:"Improving Centrifugo Redis Engine throughput and allocation efficiency with Rueidis Go library",description:"In this post we share some details about Centrifugo Redis Engine implementation and its recent performance improvements with the help of Rueidis Go library",date:"2022-12-20T00:00:00.000Z",tags:[{label:"centrifugo",permalink:"/blog/tags/centrifugo"},{label:"redis",permalink:"/blog/tags/redis"},{label:"go",permalink:"/blog/tags/go"}],readingTime:28.995,hasTruncateMarker:!0,authors:[{name:"Alexander Emelin",title:"Author of Centrifugo",imageURL:"https://github.com/FZambia.png"}],frontMatter:{title:"Improving Centrifugo Redis Engine throughput and allocation efficiency with Rueidis Go library",tags:["centrifugo","redis","go"],description:"In this post we share some details about Centrifugo Redis Engine implementation and its recent performance improvements with the help of Rueidis Go library",author:"Alexander Emelin",authorTitle:"Author of Centrifugo",authorImageURL:"https://github.com/FZambia.png",image:"/img/redis_cover.png",hide_table_of_contents:!1},unlisted:!1,prevItem:{title:"Setting up Keycloak SSO authentication flow and connecting to Centrifugo WebSocket",permalink:"/blog/2023/03/31/keycloak-sso-centrifugo"},nextItem:{title:"101 ways to subscribe user on a personal channel in Centrifugo",permalink:"/blog/2022/07/29/101-way-to-subscribe"}},c={authorsImageUrls:[void 0]},l=[];function d(e){const t={a:"a",code:"code",img:"img",p:"p",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Centrifugo_Redis_Engine_Improvements",src:i(5443).Z+"",width:"1200",height:"369"})}),"\n",(0,n.jsxs)(t.p,{children:["The main objective of Centrifugo is to manage persistent client connections established over various real-time transports (including WebSocket, HTTP-Streaming, SSE, WebTransport, etc \u2013 see ",(0,n.jsx)(t.a,{href:"https://centrifugal.dev/docs/transports/overview",children:"here"}),") and offer an API for publishing data towards established connections. Clients subscribe to channels, hence Centrifugo implements PUB/SUB mechanics to transmit published data to all online channel subscribers."]}),"\n",(0,n.jsxs)(t.p,{children:["Centrifugo employs ",(0,n.jsx)(t.a,{href:"https://redis.com/",children:"Redis"})," as its primary scalability option \u2013 so that it's possible to distribute client connections amongst numerous Centrifugo nodes without worrying about channel subscribers connected to separate nodes. Redis is incredibly mature, simple, and fast in-memory storage. Due to various built-in data structures and PUB/SUB support Redis is a perfect fit to be both Centrifugo ",(0,n.jsx)(t.code,{children:"Broker"})," and ",(0,n.jsx)(t.code,{children:"PresenceManager"})," (we will describe what's this shortly)."]}),"\n",(0,n.jsxs)(t.p,{children:["In Centrifugo v4.1.0 we introduced an updated implementation of our Redis Engine (",(0,n.jsx)(t.code,{children:"Engine"})," in Centrifugo == ",(0,n.jsx)(t.code,{children:"Broker"})," + ",(0,n.jsx)(t.code,{children:"PresenceManager"}),") which provides sufficient performance improvements to our users. This post discusses the factors that prompted us to update Redis Engine implementation and provides some insight into the results we managed to achieve. We'll examine a few well-known Go libraries for Redis communication and contrast them against Centrifugo tasks."]})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},5443:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/redis_cover-94601b44109b725188bcf75df0fb520c.png"},11151:(e,t,i)=>{i.d(t,{Z:()=>a,a:()=>s});var n=i(67294);const o={},r=n.createContext(o);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);