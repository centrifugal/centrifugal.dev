"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[68],{38253:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var t=o(85893),s=o(11151);const a={id:"delta_at_most_once",sidebar_label:"Delta for at most once",title:"Delta compression for at most once scenario"},r=void 0,i={id:"pro/delta_at_most_once",title:"Delta compression for at most once scenario",description:"Centrifugo OSS supports delta compression only in channels with recovery and positioning on. To support delta compression for the case when subscribers do not use recovery and positioning Centrifugo PRO provides a boolean namespace option called keeplatest_publication. When it's on \u2013 Centrifugo saves latest publication in channels to node's memory and uses it to construct delta updates. The publication lives in node's memory while there are active channel subscribers. This allows dealing with at most once guarantee of Broker's PUB/SUB layer and send deltas properly. So you get efficient at most once broadcast and the reduced bandwidth (of course if delta compression makes sense for data in a channel).",source:"@site/docs/pro/delta_at_most_once.md",sourceDirName:"pro",slug:"/pro/delta_at_most_once",permalink:"/docs/pro/delta_at_most_once",draft:!1,unlisted:!1,editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/pro/delta_at_most_once.md",tags:[],version:"current",frontMatter:{id:"delta_at_most_once",sidebar_label:"Delta for at most once",title:"Delta compression for at most once scenario"},sidebar:"Pro",previous:{title:"Channel CEL expressions",permalink:"/docs/pro/cel_expressions"},next:{title:"Faster performance",permalink:"/docs/pro/performance"}},c={},l=[];function d(e){const n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Centrifugo OSS supports ",(0,t.jsx)(n.a,{href:"/docs/server/delta_compression",children:"delta compression"})," only in channels with recovery and positioning on. To support delta compression for the case when subscribers do not use recovery and positioning Centrifugo PRO provides a boolean namespace option called ",(0,t.jsx)(n.code,{children:"keep_latest_publication"}),". When it's on \u2013 Centrifugo saves latest publication in channels to node's memory and uses it to construct delta updates. The publication lives in node's memory while there are active channel subscribers. This allows dealing with at most once guarantee of Broker's PUB/SUB layer and send deltas properly. So you get efficient at most once broadcast and the reduced bandwidth (of course if delta compression makes sense for data in a channel)."]}),"\n",(0,t.jsxs)(n.p,{children:["All you need to do is enable ",(0,t.jsx)(n.code,{children:"keep_latest_publication"})," for the desired namespace:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    "namespaces": [\n        {\n            "name": "example",\n            "allowed_delta_types": ["fossil"],\n            "keep_latest_publication": true\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Everything else stays the same as described in ",(0,t.jsx)(n.a,{href:"/docs/server/delta_compression",children:"delta compression"})," chapter:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"clients need to negotiate delta compression when subscribing"}),"\n",(0,t.jsxs)(n.li,{children:["publishers need to indicate the desire to use delta compression by using API ",(0,t.jsx)(n.code,{children:"delta"})," field, or by using ",(0,t.jsx)(n.code,{children:"delta_publish"})," channel namespace option."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>r});var t=o(67294);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);