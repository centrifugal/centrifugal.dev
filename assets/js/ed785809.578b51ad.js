"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[179],{5655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var o=n(95954),i=n(74848),a=n(28453);const s={title:"Scaling WebSocket in Go and beyond",tags:["websocket","go"],description:"The post describes techniques to write scalable WebSocket servers within Go ecosystem and beyond it",author:"Alexander Emelin",authorTitle:"Creator of Centrifugo",authorImageURL:"https://github.com/FZambia.png",image:"https://i.imgur.com/QOJ1M9a.png",hide_table_of_contents:!1},r=void 0,c={authorsImageUrls:[void 0]},l=[];function g(e){const t={img:"img",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://i.imgur.com/QOJ1M9a.png",alt:"gopher-broker"})}),"\n",(0,i.jsx)(t.p,{children:"I believe that in 2020 WebSocket is still an entertaining technology which is not so well-known and understood like HTTP. In this blog post I'd like to tell about state of WebSocket in Go language ecosystem, and a way we could write scalable WebSocket servers with Go and beyond Go."})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var o=n(96540);const i={},a=o.createContext(i);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:t},e.children)}},95954:e=>{e.exports=JSON.parse('{"permalink":"/blog/2020/11/12/scaling-websocket","editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/blog/2020-11-12-scaling-websocket.md","source":"@site/blog/2020-11-12-scaling-websocket.md","title":"Scaling WebSocket in Go and beyond","description":"The post describes techniques to write scalable WebSocket servers within Go ecosystem and beyond it","date":"2020-11-12T00:00:00.000Z","tags":[{"inline":true,"label":"websocket","permalink":"/blog/tags/websocket"},{"inline":true,"label":"go","permalink":"/blog/tags/go"}],"readingTime":19.79,"hasTruncateMarker":true,"authors":[{"name":"Alexander Emelin","title":"Creator of Centrifugo","imageURL":"https://github.com/FZambia.png","key":null,"page":null}],"frontMatter":{"title":"Scaling WebSocket in Go and beyond","tags":["websocket","go"],"description":"The post describes techniques to write scalable WebSocket servers within Go ecosystem and beyond it","author":"Alexander Emelin","authorTitle":"Creator of Centrifugo","authorImageURL":"https://github.com/FZambia.png","image":"https://i.imgur.com/QOJ1M9a.png","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Centrifuge \u2013 real-time messaging with Go","permalink":"/blog/2021/01/15/centrifuge-intro"},"nextItem":{"title":"Experimenting with QUIC and WebTransport","permalink":"/blog/2020/10/16/experimenting-with-quic-transport"}}')}}]);