"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[204],{19194:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"transports/uni_grpc","title":"Unidirectional GRPC","description":"It\'s possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side.","source":"@site/docs/transports/uni_grpc.md","sourceDirName":"transports","slug":"/transports/uni_grpc","permalink":"/docs/transports/uni_grpc","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/transports/uni_grpc.md","tags":[],"version":"current","frontMatter":{"id":"uni_grpc","title":"Unidirectional GRPC","sidebar_label":"GRPC"},"sidebar":"Transports","previous":{"title":"Server-Sent Events (SSE)","permalink":"/docs/transports/uni_sse"}}');var t=i(74848),s=i(28453);const o={id:"uni_grpc",title:"Unidirectional GRPC",sidebar_label:"GRPC"},c=void 0,d={},l=[{value:"How to enable",id:"how-to-enable",level:2},{value:"Default endpoint",id:"default-endpoint",level:2},{value:"Supported data formats",id:"supported-data-formats",level:2},{value:"<code>uni_grpc</code>",id:"uni_grpc",level:2},{value:"<code>uni_grpc.enabled</code>",id:"uni_grpcenabled",level:3},{value:"<code>uni_grpc.port</code>",id:"uni_grpcport",level:3},{value:"<code>uni_grpc.address</code>",id:"uni_grpcaddress",level:3},{value:"<code>uni_grpc.max_receive_message_size</code>",id:"uni_grpcmax_receive_message_size",level:3},{value:"<code>uni_grpc.tls</code>",id:"uni_grpctls",level:3},{value:"Example",id:"example",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"It's possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side."}),"\n",(0,t.jsxs)(n.p,{children:["Protobuf definitions can be found ",(0,t.jsx)(n.a,{href:"https://github.com/centrifugal/centrifugo/blob/master/internal/unigrpc/unistream/unistream.proto",children:"here"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["We publish ",(0,t.jsx)(n.a,{href:"https://buf.build/centrifugo/unistream/docs/main:centrifugal.centrifugo.unistream",children:"Centrifugo GRPC uni stream Protobuf definitions"})," to ",(0,t.jsx)(n.a,{href:"https://buf.build/product/bsr",children:"Buf Schema Registry"}),". This means that it's possible to depend on pre-generated Protobuf definitions for your programming language instead of manually generating them from the schema file (see ",(0,t.jsx)(n.a,{href:"https://buf.build/centrifugo/unistream/sdks",children:"SDKs supported by Buf registry here"}),")."]})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-enable",children:"How to enable"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:"title=config.json",children:'{\n  "uni_grpc": {\n    "enabled": true\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"default-endpoint",children:"Default endpoint"}),"\n",(0,t.jsxs)(n.p,{children:["Centrifugo runs uni GRPC server on port ",(0,t.jsx)(n.code,{children:"11000"})," (by default)."]}),"\n",(0,t.jsx)(n.h2,{id:"supported-data-formats",children:"Supported data formats"}),"\n",(0,t.jsx)(n.p,{children:"JSON and binary."}),"\n",(0,t.jsx)(n.h2,{id:"uni_grpc",children:(0,t.jsx)(n.code,{children:"uni_grpc"})}),"\n",(0,t.jsx)(n.h3,{id:"uni_grpcenabled",children:(0,t.jsx)(n.code,{children:"uni_grpc.enabled"})}),"\n",(0,t.jsxs)(n.p,{children:["Boolean, default: ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Enables unidirectional GRPC endpoint."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "uni_grpc": {\n        "enabled": true\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"uni_grpcport",children:(0,t.jsx)(n.code,{children:"uni_grpc.port"})}),"\n",(0,t.jsxs)(n.p,{children:["String, default ",(0,t.jsx)(n.code,{children:'"11000"'}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Port to listen on."}),"\n",(0,t.jsx)(n.h3,{id:"uni_grpcaddress",children:(0,t.jsx)(n.code,{children:"uni_grpc.address"})}),"\n",(0,t.jsxs)(n.p,{children:["String, default ",(0,t.jsx)(n.code,{children:'""'})," (listen on all interfaces)"]}),"\n",(0,t.jsx)(n.p,{children:"Address to bind uni GRPC to."}),"\n",(0,t.jsx)(n.h3,{id:"uni_grpcmax_receive_message_size",children:(0,t.jsx)(n.code,{children:"uni_grpc.max_receive_message_size"})}),"\n",(0,t.jsxs)(n.p,{children:["Default: ",(0,t.jsx)(n.code,{children:"65536"})," (64KB)"]}),"\n",(0,t.jsx)(n.p,{children:"Maximum allowed size of a first connect message received from GRPC connection in bytes."}),"\n",(0,t.jsx)(n.h3,{id:"uni_grpctls",children:(0,t.jsx)(n.code,{children:"uni_grpc.tls"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/server/configuration#tls-config-object",children:"TLSConfig"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Allows configuring TLS for unidirectional GRPC server."}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["We have ",(0,t.jsx)(n.a,{href:"https://github.com/centrifugal/examples/tree/master/v4/unidirectional/grpc",children:"example for Go"})," language. In general, the algorithm is like this:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Copy Protobuf definitions"}),"\n",(0,t.jsx)(n.li,{children:"Generate GRPC client code"}),"\n",(0,t.jsx)(n.li,{children:"Use generated code to connect to Centrifugo"}),"\n",(0,t.jsx)(n.li,{children:"Process Push messages, drop unknown Pushes, handle those necessary for the application."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var r=i(96540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);