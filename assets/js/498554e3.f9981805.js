"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[5656],{536:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"transports/uni_websocket","title":"Unidirectional WebSocket","description":"Default unidirectional WebSocket connection endpoint in Centrifugo is:","source":"@site/versioned_docs/version-3/transports/uni_websocket.md","sourceDirName":"transports","slug":"/transports/uni_websocket","permalink":"/docs/3/transports/uni_websocket","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-3/transports/uni_websocket.md","tags":[],"version":"3","frontMatter":{"id":"uni_websocket","title":"Unidirectional WebSocket","sidebar_label":"WebSocket"},"sidebar":"Transports","previous":{"title":"Client protocol","permalink":"/docs/3/transports/client_protocol"},"next":{"title":"SSE (EventSource)","permalink":"/docs/3/transports/uni_sse"}}');var i=t(74848),r=t(28453);const o={id:"uni_websocket",title:"Unidirectional WebSocket",sidebar_label:"WebSocket"},c=void 0,d={},l=[{value:"Connect command",id:"connect-command",level:2},{value:"SubscribeRequest",id:"subscriberequest",level:3},{value:"Supported data formats",id:"supported-data-formats",level:2},{value:"Pings",id:"pings",level:2},{value:"Options",id:"options",level:2},{value:"uni_websocket",id:"uni_websocket",level:3},{value:"uni_websocket_message_size_limit",id:"uni_websocket_message_size_limit",level:3},{value:"Example",id:"example",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Default unidirectional WebSocket connection endpoint in Centrifugo is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/connection/uni_websocket\n"})}),"\n",(0,i.jsx)(n.p,{children:"While WebSocket is bidirectional transport in its nature Centrifugo provides its unidirectional version too to give developers more choice in transports when using unidirectional approach."}),"\n",(0,i.jsx)(n.h2,{id:"connect-command",children:"Connect command"}),"\n",(0,i.jsx)(n.p,{children:"It's possible to send connect command as first WebSocket message (as JSON)."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field name"}),(0,i.jsx)(n.th,{children:"Field type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"token"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsx)(n.td,{children:"Connection JWT, not required when using the connect proxy feature."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"data"}),(0,i.jsx)(n.td,{children:"any JSON"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsx)(n.td,{children:"Custom JSON connection data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsx)(n.td,{children:"Application name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"version"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsx)(n.td,{children:"Application version"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"subs"}),(0,i.jsx)(n.td,{children:"map of channel to SubscribeRequest"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsx)(n.td,{children:"Pass an information about desired subscriptions to a server"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"subscriberequest",children:"SubscribeRequest"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field name"}),(0,i.jsx)(n.th,{children:"Field type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"recover"}),(0,i.jsx)(n.td,{children:"boolean"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsx)(n.td,{children:"Whether a client wants to recover from a certain position"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"offset"}),(0,i.jsx)(n.td,{children:"integer"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsxs)(n.td,{children:["Known stream position offset when ",(0,i.jsx)(n.code,{children:"recover"})," is used"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"epoch"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"no"}),(0,i.jsxs)(n.td,{children:["Known stream position epoch when ",(0,i.jsx)(n.code,{children:"recover"})," is used"]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"supported-data-formats",children:"Supported data formats"}),"\n",(0,i.jsx)(n.p,{children:"JSON"}),"\n",(0,i.jsx)(n.h2,{id:"pings",children:"Pings"}),"\n",(0,i.jsx)(n.p,{children:"Centrifugo uses empty messages (frame with no payload at all) as pings for unidirectional WS. You can ignore such messages or use them to detect broken connections (nothing received from a server for a long time)."}),"\n",(0,i.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(n.h3,{id:"uni_websocket",children:"uni_websocket"}),"\n",(0,i.jsxs)(n.p,{children:["Boolean, default: ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Enables unidirectional WebSocket endpoint."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "uni_websocket": true\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"uni_websocket_message_size_limit",children:"uni_websocket_message_size_limit"}),"\n",(0,i.jsx)(n.p,{children:"Default: 65536 (64KB)"}),"\n",(0,i.jsx)(n.p,{children:"Maximum allowed size of a first connect message received from WebSocket connection in bytes."}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["Let's connect to a unidirectional WebSocket endpoint using ",(0,i.jsx)(n.a,{href:"https://github.com/websockets/wscat",children:"wscat"})," tool \u2013 it allows connecting to WebSocket servers interactively from a terminal."]}),"\n",(0,i.jsxs)(n.p,{children:["First, run Centrifugo with ",(0,i.jsx)(n.code,{children:"uni_websocket"})," enabled. Also let's enable automatic personal channel subscriptions for users. Configuration example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n  "token_hmac_secret_key": "secret",\n  "uni_websocket":true,\n  "user_subscribe_to_personal": true\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Run Centrifugo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"./centrifugo -c config.json\n"})}),"\n",(0,i.jsx)(n.p,{children:"In another terminal:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u276f ./centrifugo -c config.json -u test_user\nHMAC SHA-256 JWT for user test_user with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0X3VzZXIiLCJleHAiOjE2MzAxMzAxNzB9.u7anX-VYXywX1p1lv9UC9CAu04vpA6LgG5gsw5lz1Iw\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Install ",(0,i.jsx)(n.a,{href:"https://github.com/websockets/wscat",children:"wscat"})," and run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'wscat -c "ws://localhost:8000/connection/uni_websocket"\n'})}),"\n",(0,i.jsx)(n.p,{children:"This will establish a connection with a server and you then can send connect command to a server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\u276f wscat -c "ws://localhost:8000/connection/uni_websocket"\nConnected (press CTRL+C to quit)\n> {"token": "eyJh..5lz1Iw", "subs": {"abc": {}}}\n< {"type":6,"data":{"client":"8ceaa299-4c7b-4254-9d65-c61b6883833a","version":"3.0.0","subs":{"#test_user":{"recoverable":true,"epoch":"StoH","positioned":true},"abc":{"recoverable":true,"epoch":"nNgd","positioned":true},"expires":true,"ttl":604653}}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The connection will receive pings (empty messages) periodically. You can try to publish something to ",(0,i.jsx)(n.code,{children:"#test_user"})," or ",(0,i.jsx)(n.code,{children:"abc"})," channels (using Centrifugo server API or using admin UI) \u2013 and the message should come to the connection we just established."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);