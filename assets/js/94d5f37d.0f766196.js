"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[9597],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var s=r(96540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},70581:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>a,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"server/server_api","title":"Server API walkthrough","description":"Server API provides various methods to interact with Centrifugo from your application backend. Specifically, in most cases this is an entry point for publications into channels (see publish method). It also allows getting information about Centrifugo cluster, disconnect users, extract channel online presence information, channel history, and so on.","source":"@site/versioned_docs/version-5/server/server_api.md","sourceDirName":"server","slug":"/server/server_api","permalink":"/docs/5/server/server_api","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-5/server/server_api.md","tags":[],"version":"5","frontMatter":{"id":"server_api","title":"Server API walkthrough"},"sidebar":"Guides","previous":{"title":"Configure Centrifugo","permalink":"/docs/5/server/configuration"},"next":{"title":"Client JWT authentication","permalink":"/docs/5/server/authentication"}}');var t=r(74848),i=r(28453);const l={id:"server_api",title:"Server API walkthrough"},d=void 0,c={},o=[{value:"HTTP API",id:"http-api",level:2},{value:"HTTP API authorization",id:"http-api-authorization",level:2},{value:"API methods",id:"api-methods",level:2},{value:"publish",id:"publish",level:3},{value:"Publish request",id:"publish-request",level:4},{value:"Publish result",id:"publish-result",level:4},{value:"broadcast",id:"broadcast",level:3},{value:"Broadcast request",id:"broadcast-request",level:4},{value:"Broadcast result",id:"broadcast-result",level:4},{value:"subscribe",id:"subscribe",level:3},{value:"Subscribe request",id:"subscribe-request",level:4},{value:"Override object",id:"override-object",level:4},{value:"Subscribe result",id:"subscribe-result",level:4},{value:"unsubscribe",id:"unsubscribe",level:3},{value:"Unsubscribe request",id:"unsubscribe-request",level:4},{value:"Unsubscribe result",id:"unsubscribe-result",level:4},{value:"disconnect",id:"disconnect",level:3},{value:"Disconnect request",id:"disconnect-request",level:4},{value:"Disconnect object",id:"disconnect-object",level:4},{value:"Disconnect result",id:"disconnect-result",level:4},{value:"refresh",id:"refresh",level:3},{value:"Refresh request",id:"refresh-request",level:4},{value:"Refresh result",id:"refresh-result",level:4},{value:"presence",id:"presence",level:3},{value:"Presence request",id:"presence-request",level:4},{value:"Presence result",id:"presence-result",level:4},{value:"ClientInfo",id:"clientinfo",level:4},{value:"presence_stats",id:"presence_stats",level:3},{value:"Presence stats request",id:"presence-stats-request",level:4},{value:"Presence stats result",id:"presence-stats-result",level:4},{value:"history",id:"history",level:3},{value:"History request",id:"history-request",level:4},{value:"StreamPosition",id:"streamposition",level:4},{value:"History result",id:"history-result",level:4},{value:"history_remove",id:"history_remove",level:3},{value:"History remove request",id:"history-remove-request",level:4},{value:"History remove result",id:"history-remove-result",level:4},{value:"channels",id:"channels",level:3},{value:"Channels request",id:"channels-request",level:4},{value:"Channels result",id:"channels-result",level:4},{value:"ChannelInfo",id:"channelinfo",level:4},{value:"info",id:"info",level:3},{value:"Info request",id:"info-request",level:4},{value:"Info result",id:"info-result",level:4},{value:"batch",id:"batch",level:3},{value:"HTTP API libraries",id:"http-api-libraries",level:2},{value:"GRPC API",id:"grpc-api",level:2},{value:"GRPC API options",id:"grpc-api-options",level:3},{value:"GRPC example for Python",id:"grpc-example-for-python",level:3},{value:"GRPC example for Go",id:"grpc-example-for-go",level:3},{value:"Integration with Buf schema registry",id:"integration-with-buf-schema-registry",level:3},{value:"GRPC API key authorization",id:"grpc-api-key-authorization",level:3},{value:"Transport error mode",id:"transport-error-mode",level:2},{value:"Centrifugo error code to HTTP code",id:"centrifugo-error-code-to-http-code",level:3},{value:"Centrifugo error code to GRPC code",id:"centrifugo-error-code-to-grpc-code",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Server API provides various methods to interact with Centrifugo from your application backend. Specifically, in most cases this is an entry point for publications into channels (see ",(0,t.jsx)(n.a,{href:"#publish",children:"publish"})," method). It also allows getting information about Centrifugo cluster, disconnect users, extract channel online presence information, channel history, and so on."]}),"\n",(0,t.jsx)(n.p,{children:"There are two kinds of server API available at the moment:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"HTTP API"}),"\n",(0,t.jsx)(n.li,{children:"GRPC API"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Both are similar in terms of request/response structures because based on the same schema."}),"\n",(0,t.jsx)(n.h2,{id:"http-api",children:"HTTP API"}),"\n",(0,t.jsx)(n.p,{children:"HTTP API is the simplest way to communicate with Centrifugo from your application backend."}),"\n",(0,t.jsxs)(n.p,{children:["Centrifugo HTTP API works on ",(0,t.jsx)(n.code,{children:"/api"})," path prefix (by default). The request format is super-simple: this is an HTTP POST request to a specific method API path with ",(0,t.jsx)(n.code,{children:"application/json"})," Content-Type, ",(0,t.jsx)(n.code,{children:"X-API-Key"})," header and with JSON body."]}),"\n",(0,t.jsxs)(n.p,{children:["Instead of many words, here is an example how to call ",(0,t.jsx)(n.code,{children:"publish"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channel": "test", "data": {"value": "test_value"}}\' \\\n  http://localhost:8000/api/publish\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can just use one of our ",(0,t.jsx)(n.a,{href:"/docs/5/server/server_api#http-api-libraries",children:"available HTTP API libraries"})," or use Centrifugo ",(0,t.jsx)(n.a,{href:"#grpc-api",children:"GRPC API"})," to avoid manually constructing requests structures."]})}),"\n",(0,t.jsx)(n.p,{children:"Below we look at all aspects of Centrifugo HTTP API in detail, starting with information about authorization."}),"\n",(0,t.jsx)(n.h2,{id:"http-api-authorization",children:"HTTP API authorization"}),"\n",(0,t.jsxs)(n.p,{children:["HTTP API is protected by ",(0,t.jsx)(n.code,{children:"api_key"})," set in Centrifugo configuration. I.e. ",(0,t.jsx)(n.code,{children:"api_key"})," option must be added to config, like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "api_key": "<YOUR_API_KEY>"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This API key must be set in the request ",(0,t.jsx)(n.code,{children:"X-API-Key"})," header in this way:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"X-API-Key: <YOUR_API_KEY>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It's also possible to pass API key over URL query param. Simply add ",(0,t.jsx)(n.code,{children:"?api_key=<YOUR_API_KEY>"})," query param to the API endpoint. Keep in mind that passing the API key in the ",(0,t.jsx)(n.code,{children:"X-API-Key"})," header is a recommended way as it is considered more secure."]}),"\n",(0,t.jsxs)(n.p,{children:["To disable API key check on Centrifugo side you can use ",(0,t.jsx)(n.code,{children:"api_insecure"})," configuration option. Use it in development only or make sure to protect the API endpoint by proxy or firewall rules in production \u2013 to prevent anyone with access to the endpoint to send commands over your unprotected Centrifugo API."]}),"\n",(0,t.jsx)(n.p,{children:"API key auth is not very safe for man-in-the-middle so we also recommended protecting Centrifugo with TLS."}),"\n",(0,t.jsx)(n.h2,{id:"api-methods",children:"API methods"}),"\n",(0,t.jsx)(n.p,{children:"Server API supports many methods. Let's describe them starting with the most important publish operation."}),"\n",(0,t.jsx)(n.h3,{id:"publish",children:"publish"}),"\n",(0,t.jsxs)(n.p,{children:["Publish method allows publishing data into a channel (we call this message ",(0,t.jsx)(n.code,{children:"publication"})," in Centrifugo). Most probably this is a command you'll use most of the time."]}),"\n",(0,t.jsx)(n.p,{children:"Here is an example of publishing message to Centrifugo:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channel": "chat", "data": {"text": "hello"}}\' \\\n  http://localhost:8000/api/publish\n'})}),"\n",(0,t.jsx)(n.p,{children:"In case of successful publish you will get a response like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "result": {}\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["As an additional example, let's take a look how to publish to Centrifugo with ",(0,t.jsx)(n.code,{children:"requests"})," library for Python:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import json\nimport requests\n\napi_key = "YOUR_API_KEY"\ndata = json.dumps({\n    "channel": "docs", \n    "data": {\n        "content": "1"\n    }\n})\nheaders = {\'Content-type\': \'application/json\', \'X-API-Key\': api_key}\nresp = requests.post("https://centrifuge.example.com/api/publish", data=data, headers=headers)\nprint(resp.json())\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In case of publication error, response object will contain ",(0,t.jsx)(n.code,{children:"error"})," field. For example, let's publish to an unknown namespace (not defined in Centrifugo configuration):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channel": "unknown:chat", "data": {"text": "hello"}}\' \\\n  http://localhost:8000/api/publish\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In response you will also get 200 OK, but payload will contain ",(0,t.jsx)(n.code,{children:"error"})," field instead of ",(0,t.jsx)(n.code,{children:"result"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": {\n        "code": 102,\n        "message": "namespace not found"\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"error"})," object contains error code and message - this is also the same for other commands described below."]}),"\n",(0,t.jsx)(n.h4,{id:"publish-request",children:"Publish request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channel"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Name of channel to publish"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"data"}),(0,t.jsx)(n.td,{children:"any JSON"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Custom JSON data to publish into a channel"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"skip_history"}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Skip adding publication to history for this request"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"tags"}),(0,t.jsx)(n.td,{children:"map[string]string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Publication tags - map with arbitrary string keys and values which is attached to publication and will be delivered to clients"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"b64data"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsxs)(n.td,{children:["Custom binary data to publish into a channel encoded to base64 so it's possible to use HTTP API to send binary to clients. Centrifugo will decode it from base64 before publishing. In case of GRPC you can publish binary using ",(0,t.jsx)(n.code,{children:"data"})," field."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"idempotency_key"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Optional idempotency key to drop duplicate publications upon retries. It acts per channel. Centrifugo currently keeps the cache of idempotent publish results during 5 minutes window. Available since Centrifugo v5.2.0, supported only by Memory and Redis engines"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"delta"}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"When set to true tells Centrifugo to construct delta update if possible when broadcasting message to subscribers. Available since Centrifugo v5.4.0"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"publish-result",children:"Publish result"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"offset"}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Offset of publication in history stream"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"epoch"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Epoch of current stream"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"broadcast",children:"broadcast"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"broadcast"})," is similar to ",(0,t.jsx)(n.code,{children:"publish"})," but allows to efficiently send the same data into many channels:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channels": ["user:1", "user:2"], "data": {"text": "hello"}}\' \\\n  http://localhost:8000/api/broadcast\n'})}),"\n",(0,t.jsx)(n.h4,{id:"broadcast-request",children:"Broadcast request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channels"}),(0,t.jsx)(n.td,{children:"Array of strings"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"List of channels to publish data to"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"data"}),(0,t.jsx)(n.td,{children:"any JSON"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Custom JSON data to publish into each channel"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"skip_history"}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Skip adding publications to channels' history for this request"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"tags"}),(0,t.jsx)(n.td,{children:"map[string]string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Publication tags - map with arbitrary string keys and values which is attached to publication and will be delivered to clients"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"b64data"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsxs)(n.td,{children:["Custom binary data to publish into a channel encoded to base64 so it's possible to use HTTP API to send binary to clients. Centrifugo will decode it from base64 before publishing. In case of GRPC you can publish binary using ",(0,t.jsx)(n.code,{children:"data"})," field."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"idempotency_key"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Optional idempotency key to drop duplicate publications upon retries. It acts per channel. Centrifugo currently keeps the cache of idempotent publish results during 5 minutes window. Available since Centrifugo v5.2.0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"delta"}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"When set to true tells Centrifugo to construct delta update if possible when broadcasting message to subscribers. Available since Centrifugo v5.4.0"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"broadcast-result",children:"Broadcast result"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"responses"}),(0,t.jsx)(n.td,{children:"Array of publish responses"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Responses for each individual publish (with possible error and publish result)"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"subscribe",children:"subscribe"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"subscribe"})," allows subscribing active user's sessions to a channel. Note, it's mostly for dynamic ",(0,t.jsx)(n.a,{href:"/docs/5/server/server_subs",children:"server-side subscriptions"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"This is not a real-time streaming subscription request \u2013 it's just a command to subscribe a specific online session to some channel."})}),"\n",(0,t.jsx)(n.h4,{id:"subscribe-request",children:"Subscribe request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"user"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"User ID to subscribe"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channel"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Name of channel to subscribe user to"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"info"}),(0,t.jsx)(n.td,{children:"any JSON"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Attach custom data to subscription (will be used in presence and join/leave messages)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"b64info"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"info in base64 for binary mode (will be decoded by Centrifugo)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"client"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Specific client ID to subscribe (user still required to be set, will ignore other user connections with different client IDs)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"session"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Specific client session to subscribe (user still required to be set)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"data"}),(0,t.jsx)(n.td,{children:"any JSON"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Custom subscription data (will be sent to client in Subscribe push)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"b64data"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Same as data but in base64 format (will be decoded by Centrifugo)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"recover_since"}),(0,t.jsx)(n.td,{children:"StreamPosition object"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Stream position to recover from"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"override"}),(0,t.jsx)(n.td,{children:"Override object"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Allows dynamically override some channel options defined in Centrifugo configuration (see below available fields)"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"override-object",children:"Override object"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"presence"}),(0,t.jsx)(n.td,{children:"BoolValue"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Override presence"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"join_leave"}),(0,t.jsx)(n.td,{children:"BoolValue"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Override join_leave"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"force_push_join_leave"}),(0,t.jsx)(n.td,{children:"BoolValue"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Override force_push_join_leave"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"force_positioning"}),(0,t.jsx)(n.td,{children:"BoolValue"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Override force_positioning"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"force_recovery"}),(0,t.jsx)(n.td,{children:"BoolValue"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Override force_recovery"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"BoolValue is an object like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "value": true/false\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"subscribe-result",children:"Subscribe result"}),"\n",(0,t.jsx)(n.p,{children:"Empty object at the moment."}),"\n",(0,t.jsx)(n.h3,{id:"unsubscribe",children:"unsubscribe"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"unsubscribe"})," allows unsubscribing user from a channel."]}),"\n",(0,t.jsx)(n.h4,{id:"unsubscribe-request",children:"Unsubscribe request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"user"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"User ID to unsubscribe"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channel"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Name of channel to unsubscribe user to"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"client"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Specific client ID to unsubscribe (user still required to be set)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"session"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Specific client session to disconnect (user still required to be set)."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"unsubscribe-result",children:"Unsubscribe result"}),"\n",(0,t.jsx)(n.p,{children:"Empty object at the moment."}),"\n",(0,t.jsx)(n.h3,{id:"disconnect",children:"disconnect"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"disconnect"})," allows disconnecting a user by ID."]}),"\n",(0,t.jsx)(n.h4,{id:"disconnect-request",children:"Disconnect request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"user"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"User ID to disconnect"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"client"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Specific client ID to disconnect (user still required to be set)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"session"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Specific client session to disconnect (user still required to be set)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"whitelist"}),(0,t.jsx)(n.td,{children:"Array of strings"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Array of client IDs to keep"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"disconnect"}),(0,t.jsx)(n.td,{children:"Disconnect object"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Provide custom disconnect object, see below"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"disconnect-object",children:"Disconnect object"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"code"}),(0,t.jsx)(n.td,{children:"int"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Disconnect code"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"reason"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Disconnect reason"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"disconnect-result",children:"Disconnect result"}),"\n",(0,t.jsx)(n.p,{children:"Empty object at the moment."}),"\n",(0,t.jsx)(n.h3,{id:"refresh",children:"refresh"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"refresh"})," allows refreshing user connection (mostly useful when unidirectional transports are used)."]}),"\n",(0,t.jsx)(n.h4,{id:"refresh-request",children:"Refresh request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"user"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"User ID to refresh"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"client"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Client ID to refresh  (user still required to be set)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"session"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Specific client session to refresh (user still required to be set)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"expired"}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Mark connection as expired and close with Disconnect Expired reason"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"expire_at"}),(0,t.jsx)(n.td,{children:"int"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Unix time (in seconds) in the future when the connection will expire"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"refresh-result",children:"Refresh result"}),"\n",(0,t.jsx)(n.p,{children:"Empty object at the moment."}),"\n",(0,t.jsx)(n.h3,{id:"presence",children:"presence"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"presence"})," allows getting channel online presence information (all clients currently subscribed on this channel)."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Presence in channels is not enabled by default. See how to enable it over ",(0,t.jsx)(n.a,{href:"/docs/5/server/channels#channel-options",children:"channel options"}),". Also check out ",(0,t.jsx)(n.a,{href:"/docs/5/server/presence",children:"dedicated chapter about it"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channel": "chat"}\' \\\n  http://localhost:8000/api/presence\n'})}),"\n",(0,t.jsx)(n.p,{children:"Example response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n    "result": {\n        "presence": {\n            "c54313b2-0442-499a-a70c-051f8588020f": {\n                "client": "c54313b2-0442-499a-a70c-051f8588020f",\n                "user": "42"\n            },\n            "adad13b1-0442-499a-a70c-051f858802da": {\n                "client": "adad13b1-0442-499a-a70c-051f858802da",\n                "user": "42"\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"presence-request",children:"Presence request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channel"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Name of channel to call presence from"})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"presence-result",children:"Presence result"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"presence"}),(0,t.jsx)(n.td,{children:"Map of client ID (string) to ClientInfo object"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Offset of publication in history stream"})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"clientinfo",children:"ClientInfo"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"client"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Client ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"user"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"User ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"conn_info"}),(0,t.jsx)(n.td,{children:"JSON"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Optional connection info"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"chan_info"}),(0,t.jsx)(n.td,{children:"JSON"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Optional channel info"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"presence_stats",children:"presence_stats"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"presence_stats"})," allows getting short channel presence information - number of clients and number of unique users (based on user ID)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channel": "chat"}\' \\\n  http://localhost:8000/api/presence_stats\n'})}),"\n",(0,t.jsx)(n.p,{children:"Example response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "result": {\n        "num_clients": 0,\n        "num_users": 0\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"presence-stats-request",children:"Presence stats request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channel"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Name of channel to call presence from"})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"presence-stats-result",children:"Presence stats result"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"num_clients"}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Total number of clients in channel"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"num_users"}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Total number of unique users in channel"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"history",children:"history"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"history"})," allows getting channel history information (list of last messages published into the channel). By default if no ",(0,t.jsx)(n.code,{children:"limit"})," parameter set in request ",(0,t.jsx)(n.code,{children:"history"})," call will only return current stream position information - i.e. ",(0,t.jsx)(n.code,{children:"offset"})," and ",(0,t.jsx)(n.code,{children:"epoch"})," fields. To get publications you must explicitly provide ",(0,t.jsx)(n.code,{children:"limit"})," parameter. See also history API description in ",(0,t.jsx)(n.a,{href:"/docs/5/server/history_and_recovery#history-iteration-api",children:"special doc chapter"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["History in channels is not enabled by default. See how to enable it over ",(0,t.jsx)(n.a,{href:"/docs/5/server/channels#channel-options",children:"channel options"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channel": "chat", "limit": 2}\' \\\n  http://localhost:8000/api/history\n'})}),"\n",(0,t.jsx)(n.p,{children:"Example response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "result": {\n        "epoch": "qFhv",\n        "offset": 4,\n        "publications": [\n            {\n                "data": {\n                    "text": "hello"\n                },\n                "offset": 2\n            },\n            {\n                "data": {\n                    "text": "hello"\n                },\n                "offset": 3\n            }\n        ]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"history-request",children:"History request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channel"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Name of channel to call history from"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"limit"}),(0,t.jsx)(n.td,{children:"int"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Limit number of returned publications, if not set in request then only current stream position information will present in result (without any publications)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"since"}),(0,t.jsx)(n.td,{children:"StreamPosition object"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"To return publications after this position"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"reverse"}),(0,t.jsx)(n.td,{children:"bool"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Iterate in reversed order (from latest to earliest)"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"streamposition",children:"StreamPosition"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"offset"}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Offset in a stream"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"epoch"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Stream epoch"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"history-result",children:"History result"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"publications"}),(0,t.jsx)(n.td,{children:"Array of publication objects"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"List of publications in channel"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"offset"}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Top offset in history stream"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"epoch"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Epoch of current stream"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"history_remove",children:"history_remove"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"history_remove"})," allows removing publications in channel history. Current top stream position meta data kept untouched to avoid client disconnects due to insufficient state."]}),"\n",(0,t.jsx)(n.h4,{id:"history-remove-request",children:"History remove request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channel"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"yes"}),(0,t.jsx)(n.td,{children:"Name of channel to remove history"})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"history-remove-result",children:"History remove result"}),"\n",(0,t.jsx)(n.p,{children:"Empty object at the moment."}),"\n",(0,t.jsx)(n.h3,{id:"channels",children:"channels"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"channels"})," return active channels (with one or more active subscribers in it)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl --header \"X-API-Key: <API_KEY>\" \\\n  --request POST \\\n  --data '{}' \\\n  http://localhost:8000/api/channels\n"})}),"\n",(0,t.jsx)(n.h4,{id:"channels-request",children:"Channels request"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"pattern"}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsxs)(n.td,{children:["Pattern to filter channels, we are using ",(0,t.jsx)(n.a,{href:"https://github.com/gobwas/glob",children:"gobwas/glob"})," library for matching"]})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"channels-result",children:"Channels result"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"channels"}),(0,t.jsx)(n.td,{children:"Map of string to ChannelInfo"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Map where key is channel and value is ChannelInfo (see below)"})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"channelinfo",children:"ChannelInfo"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"num_clients"}),(0,t.jsx)(n.td,{children:"integer"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Total number of connections currently subscribed to a channel"})]})})]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Keep in mind that since the ",(0,t.jsx)(n.code,{children:"channels"})," method by default returns all active channels it can be really heavy for massive deployments. Centrifugo does not provide a way to paginate over channels list. At the moment we mostly suppose that ",(0,t.jsx)(n.code,{children:"channels"})," API call will be used in the development process or for administrative/debug purposes, and in not very massive Centrifugo setups (with no more than 10k active channels). A better and scalable approach for huge setups could be a real-time analytics approach ",(0,t.jsx)(n.a,{href:"/docs/5/pro/analytics",children:"described here"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"info",children:"info"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"info"})," method allows getting information about running Centrifugo nodes."]}),"\n",(0,t.jsx)(n.p,{children:"Example response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "result": {\n        "nodes": [\n            {\n                "name": "Alexanders-MacBook-Pro.local_8000",\n                "num_channels": 0,\n                "num_clients": 0,\n                "num_users": 0,\n                "uid": "f844a2ed-5edf-4815-b83c-271974003db9",\n                "uptime": 0,\n                "version": ""\n            }\n        ]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"info-request",children:"Info request"}),"\n",(0,t.jsx)(n.p,{children:"Empty object at the moment."}),"\n",(0,t.jsx)(n.h4,{id:"info-result",children:"Info result"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Field type"}),(0,t.jsx)(n.th,{children:"Optional"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"nodes"}),(0,t.jsx)(n.td,{children:"Array of Node objects"}),(0,t.jsx)(n.td,{children:"no"}),(0,t.jsx)(n.td,{children:"Information about all nodes in a cluster"})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"batch",children:"batch"}),"\n",(0,t.jsx)(n.p,{children:"Batch allows sending many commands in one request. Commands processed sequentially by Centrifugo, users should check individual error in each returned reply. Useful to avoid RTT latency penalty for each command sent, this is an analogue of pipelining."}),"\n",(0,t.jsx)(n.p,{children:"Example with two publications in one request:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"commands": [{"publish": {"channel": "test1", "data": {}}}, {"publish": {"channel": "x:test2", "data": {}}}]}\' \\\n  http://localhost:8000/api/batch\n'})}),"\n",(0,t.jsx)(n.p,{children:"Example response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "replies":[\n        {"publish":{}},\n        {"error":{"code":102,"message":"unknown channel"}}\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Starting from Centrifugo v5.2.0 it's also possible to pass ",(0,t.jsx)(n.code,{children:'"parallel": true'})," on ",(0,t.jsx)(n.code,{children:"batch"})," data top level to make batch commands processing parallel on Centrifugo side. This may provide reduced latency (especially in case of using Redis engine)."]}),"\n",(0,t.jsx)(n.h2,{id:"http-api-libraries",children:"HTTP API libraries"}),"\n",(0,t.jsxs)(n.p,{children:["Sending an API request to Centrifugo is a simple task to do in any programming language - this is just a POST request with JSON payload in body and ",(0,t.jsx)(n.code,{children:"Authorization"})," header."]}),"\n",(0,t.jsx)(n.p,{children:"But we have several official HTTP API libraries for different languages, to help developers to avoid constructing proper HTTP requests manually:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/centrifugal/cent",children:"cent"})," for Python"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/centrifugal/phpcent",children:"phpcent"})," for PHP"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/centrifugal/gocent",children:"gocent"})," for Go"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/centrifugal/rubycent",children:"rubycent"})," for Ruby"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Also, there are Centrifugo server API libraries created by community:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/katarinamolotova/javacent",children:"javacent"})," HTTP API client for Java"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/SocketSomeone/cent.js",children:"cent.js"})," API client for NodeJS"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/sajjad-fatehi/centri-agent",children:"CentriAgent"})," - one more API client for NodeJS"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/ismkdc/Centrifugo.AspNetCore",children:"Centrifugo.AspNetCore"})," API client for ASP.NET Core"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/devops-israel/crystalcent",children:"crystalcent"})," API client for Crystal language"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Also, keep in mind that Centrifugo ",(0,t.jsx)(n.a,{href:"#grpc-api",children:"has GRPC API"})," so you can automatically generate client API code for your language."]})}),"\n",(0,t.jsx)(n.h2,{id:"grpc-api",children:"GRPC API"}),"\n",(0,t.jsxs)(n.p,{children:["Centrifugo also supports ",(0,t.jsx)(n.a,{href:"https://grpc.io/",children:"GRPC"})," API. With GRPC it's possible to communicate with Centrifugo using a more compact binary representation of commands and use the power of HTTP/2 which is the transport behind GRPC."]}),"\n",(0,t.jsx)(n.p,{children:"GRPC API is also useful if you want to publish binary data to Centrifugo channels."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["GRPC API allows calling all commands described in ",(0,t.jsx)(n.a,{href:"#http-api",children:"HTTP API doc"}),", actually both GRPC and HTTP API in Centrifugo based on the same Protobuf schema definition. So refer to the HTTP API description doc for the parameter and the result field description."]})}),"\n",(0,t.jsxs)(n.p,{children:["You can enable GRPC API in Centrifugo using ",(0,t.jsx)(n.code,{children:"grpc_api"})," option:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "grpc_api": true\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["By default, GRPC will be served on port ",(0,t.jsx)(n.code,{children:"10000"})," but you can change it using the ",(0,t.jsx)(n.code,{children:"grpc_api_port"})," option."]}),"\n",(0,t.jsxs)(n.p,{children:["Now, as soon as Centrifugo started \u2013 you can send GRPC commands to it. To do this get our API Protocol Buffer definitions ",(0,t.jsx)(n.a,{href:"https://github.com/centrifugal/centrifugo/blob/master/internal/apiproto/api.proto",children:"from this file"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Then see ",(0,t.jsx)(n.a,{href:"https://grpc.io/docs/",children:"GRPC docs specific to your language"})," to find out how to generate client code from definitions and use generated code to communicate with Centrifugo."]}),"\n",(0,t.jsx)(n.h3,{id:"grpc-api-options",children:"GRPC API options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"grpc_api"})," - boolean, default ",(0,t.jsx)(n.code,{children:"false"}),". Enables GRPC API server."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"grpc_api_port"})," - integer, default ",(0,t.jsx)(n.code,{children:"10000"}),". Port on which GRPC API server runs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"grpc_api_address"})," - string, default ",(0,t.jsx)(n.code,{children:'""'}),". Custom address to run GRPC API server on."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"grpc_api_max_receive_message_size"})," \u2013 integer (number of bytes), default ",(0,t.jsx)(n.code,{children:"0"}),". If set to a value > 0 allows tuning the max size of message GRPC server can receive. By default, GRPC library's default is used which is 4194304 bytes (4MB). Available since Centrifugo v5.4.3."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"grpc_api_reflection"})," - boolean, default ",(0,t.jsx)(n.code,{children:"false"}),". Enables GRPC reflection API for introspection."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"grpc-example-for-python",children:"GRPC example for Python"}),"\n",(0,t.jsx)(n.p,{children:"For example for Python you need to run sth like this according to GRPC docs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pip install grpcio-tools\npython -m grpc_tools.protoc -I ./ --python_out=. --grpc_python_out=. api.proto\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As soon as you run the command you will have 2 generated files: ",(0,t.jsx)(n.code,{children:"api_pb2.py"})," and ",(0,t.jsx)(n.code,{children:"api_pb2_grpc.py"}),". Now all you need is to write a simple program that uses generated code and sends GRPC requests to Centrifugo:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import grpc\nimport api_pb2_grpc as api_grpc\nimport api_pb2 as api_pb\n\nchannel = grpc.insecure_channel('localhost:10000')\nstub = api_grpc.CentrifugoApiStub(channel)\n\ntry:\n    resp = stub.Info(api_pb.InfoRequest())\nexcept grpc.RpcError as err:\n    # GRPC level error.\n    print(err.code(), err.details())\nelse:\n    if resp.error.code:\n        # Centrifugo server level error.\n        print(resp.error.code, resp.error.message)\n    else:\n        print(resp.result)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note that you need to explicitly handle Centrifugo API level error which is not transformed automatically into GRPC protocol-level error."}),"\n",(0,t.jsx)(n.h3,{id:"grpc-example-for-go",children:"GRPC example for Go"}),"\n",(0,t.jsx)(n.p,{children:"Here is a simple example of how to run Centrifugo with the GRPC Go client."}),"\n",(0,t.jsxs)(n.p,{children:["You need ",(0,t.jsx)(n.code,{children:"protoc"}),", ",(0,t.jsx)(n.code,{children:"protoc-gen-go"})," and ",(0,t.jsx)(n.code,{children:"protoc-gen-go-grpc"})," installed."]}),"\n",(0,t.jsx)(n.p,{children:"First start Centrifugo itself with GRPC API enabled:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"CENTRIFUGO_GRPC_API=1 centrifugo --config config.json\n"})}),"\n",(0,t.jsx)(n.p,{children:"In another terminal tab:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir centrifugo_grpc_example\ncd centrifugo_grpc_example/\ntouch main.go\ngo mod init centrifugo_example\nmkdir apiproto\ncd apiproto\nwget https://raw.githubusercontent.com/centrifugal/centrifugo/master/internal/apiproto/api.proto -O api.proto\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"protoc"})," to generate code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"protoc -I ./ api.proto --go_out=. --go-grpc_out=.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Put the following code to ",(0,t.jsx)(n.code,{children:"main.go"})," file (created on the last step above):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "log"\n    "time"\n\n    "centrifugo_example/apiproto"\n\n    "google.golang.org/grpc"\n)\n\nfunc main() {\n    conn, err := grpc.Dial("localhost:10000", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoApiClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &apiproto.PublishRequest{\n            Channel: "chat:index",\n            Data:    []byte(`{"input": "hello from GRPC"}`),\n        })\n        if err != nil {\n            log.Printf("Transport level error: %v", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf("Error %d (%s)", respError.Code, respError.Message)\n            } else {\n                log.Println("Successfully published")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Then run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"go run main.go\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The program starts and periodically publishes the same payload into ",(0,t.jsx)(n.code,{children:"chat:index"})," channel."]}),"\n",(0,t.jsx)(n.h3,{id:"integration-with-buf-schema-registry",children:"Integration with Buf schema registry"}),"\n",(0,t.jsxs)(n.p,{children:["We publish ",(0,t.jsx)(n.a,{href:"https://buf.build/centrifugo/apiproto/docs/main:centrifugal.centrifugo.api",children:"Centrifugo GRPC API Protobuf definitions"})," to ",(0,t.jsx)(n.a,{href:"https://buf.build/product/bsr",children:"Buf Schema Registry"}),". This means that to use Centrifugo GRPC APIs it's possible to depend on pre-generated Protobuf definitions for your programming language instead of manually generating them from the schema file (see ",(0,t.jsx)(n.a,{href:"https://buf.build/centrifugo/apiproto/sdks",children:"SDKs supported by Buf registry here"}),")."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Note, Centrifugo is not compatible with Buf Connect HTTP protocol \u2013 i.e. you can use Buf tools to communicate with Centrifugo GRPC API only."})}),"\n",(0,t.jsx)(n.h3,{id:"grpc-api-key-authorization",children:"GRPC API key authorization"}),"\n",(0,t.jsxs)(n.p,{children:["You can also set ",(0,t.jsx)(n.code,{children:"grpc_api_key"})," option (string) in Centrifugo configuration to protect GRPC API with key. In this case, you should set per RPC metadata with key ",(0,t.jsx)(n.code,{children:"authorization"})," and value ",(0,t.jsx)(n.code,{children:"apikey <KEY>"}),". For example in Go language:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "log"\n    "time"\n\n    "centrifugo_example/apiproto"\n    \n    "google.golang.org/grpc"\n)\n\ntype keyAuth struct {\n    key string\n}\n\nfunc (t keyAuth) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n    return map[string]string{\n        "authorization": "apikey " + t.key,\n    }, nil\n}\n\nfunc (t keyAuth) RequireTransportSecurity() bool {\n    return false\n}\n\nfunc main() {\n    conn, err := grpc.Dial("localhost:10000", grpc.WithInsecure(), grpc.WithPerRPCCredentials(keyAuth{"xxx"}))\n    if err != nil {\n        log.Fatalln(err)\n    }\n    defer conn.Close()\n    client := apiproto.NewCentrifugoClient(conn)\n    for {\n        resp, err := client.Publish(context.Background(), &PublishRequest{\n            Channel: "chat:index",\n            Data:    []byte(`{"input": "hello from GRPC"}`),\n        })\n        if err != nil {\n            log.Printf("Transport level error: %v", err)\n        } else {\n            if resp.GetError() != nil {\n                respError := resp.GetError()\n                log.Printf("Error %d (%s)", respError.Code, respError.Message)\n            } else {\n                log.Println("Successfully published")\n            }\n        }\n        time.Sleep(time.Second)\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"For other languages refer to GRPC docs."}),"\n",(0,t.jsx)(n.h2,{id:"transport-error-mode",children:"Transport error mode"}),"\n",(0,t.jsxs)(n.p,{children:["By default, Centrifugo server API never returns transport level errors - for example it always returns 200 OK for HTTP API and never returns GRPC transport-level errors. Centrifugo returns its custom errors from API calls inside optional ",(0,t.jsx)(n.code,{children:"error"})," field of response as we showed above in this doc. This means that API call to Centrifigo API may returns 200 OK, but in the ",(0,t.jsx)(n.code,{children:"error"})," field you may find Centrifugo-specific ",(0,t.jsx)(n.code,{children:"100: internal error"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Since Centrifugo v5.1.0 Centrifigo has an option to use transport-native error codes instead of Centrifugo ",(0,t.jsx)(n.code,{children:"error"})," field in the response. The main motivation is make API calls friendly to integrate with the network ecosystem - for automatic retries, better logging, etc. In many situations this may be more obvious for humans also."]}),"\n",(0,t.jsx)(n.p,{children:"Let's show an example. Without any special options HTTP request to Centrifigo server API which contains error in response looks like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\u276f echo \'{}\' | http POST "http://localhost:8000/api/publish"\nHTTP/1.1 200 OK\nContent-Length: 46\nContent-Type: application/json\nDate: Sat, 19 Aug 2023 07:23:40 GMT\n\n{\n    "error": {\n        "code": 107,\n        "message": "bad request"\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Note - it returns 200 OK even though response contains ",(0,t.jsx)(n.code,{children:"error"})," field. With ",(0,t.jsx)(n.code,{children:"transport"})," error mode request-response may be transformed into the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\u276f echo \'{}\' | http POST "http://localhost:8000/api/publish" "X-Centrifugo-Error-Mode: transport"\nHTTP/1.1 400 Bad Request\nContent-Length: 36\nContent-Type: application/json\nDate: Sat, 19 Aug 2023 07:23:59 GMT\n\n{\n    "code": 107,\n    "message": "bad request"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Transport error mode may be turned on globally:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["using ",(0,t.jsx)(n.code,{children:'"api_error_mode": "transport"'})," option for HTTP server API"]}),"\n",(0,t.jsxs)(n.li,{children:["using ",(0,t.jsx)(n.code,{children:'"grpc_api_error_mode": "transport"'})," option for GRPC server API"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Also, this mode may be used on per-request basis:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["by setting custom header ",(0,t.jsx)(n.code,{children:"X-Centrifugo-Error-Mode: transport"})," for HTTP (as we just showed in the example)"]}),"\n",(0,t.jsxs)(n.li,{children:["adding custom metadata key ",(0,t.jsx)(n.code,{children:"x-centrifugo-error-mode: transport"})," for GRPC"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Note, that ",(0,t.jsx)(n.code,{children:"transport"})," error mode does not help a lot with ",(0,t.jsx)(n.code,{children:"Batch"})," and ",(0,t.jsx)(n.code,{children:"Broadcast"})," APIs which are quite special because these calls contain many independent operations. For these calls you still need to look at individual ",(0,t.jsx)(n.code,{children:"error"})," objects in response."]})}),"\n",(0,t.jsx)(n.p,{children:"To achieve the goal we have an internal matching of Centrifugo API error codes to HTTP and GRPC error codes."}),"\n",(0,t.jsx)(n.h3,{id:"centrifugo-error-code-to-http-code",children:"Centrifugo error code to HTTP code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func MapErrorToHTTPCode(err *Error) int {\n\tswitch err.Code {\n\tcase ErrorInternal.Code: // 100 -> HTTP 500\n\t\treturn http.StatusInternalServerError\n\tcase ErrorUnknownChannel.Code, ErrorNotFound.Code: // 102, 104 -> HTTP 404\n\t\treturn http.StatusNotFound\n\tcase ErrorBadRequest.Code, ErrorNotAvailable.Code: // 107, 108 -> HTTP 400\n\t\treturn http.StatusBadRequest\n\tcase ErrorUnrecoverablePosition.Code: // 112 -> HTTP 416\n\t\treturn http.StatusRequestedRangeNotSatisfiable\n\tcase ErrorConflict.Code: // 113 -> HTTP 409\n\t\treturn http.StatusConflict\n\tdefault:\n\t\t// Default to Internal Error for unmapped errors.\n\t\t// In general should be avoided - all new API errors must be explicitly described here.\n\t\treturn http.StatusInternalServerError // HTTP 500\n\t}\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"centrifugo-error-code-to-grpc-code",children:"Centrifugo error code to GRPC code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func MapErrorToGRPCCode(err *Error) codes.Code {\n\tswitch err.Code {\n\tcase ErrorInternal.Code: // 100\n\t\treturn codes.Internal\n\tcase ErrorUnknownChannel.Code, ErrorNotFound.Code: // 102, 104\n\t\treturn codes.NotFound\n\tcase ErrorBadRequest.Code, ErrorNotAvailable.Code: // 107, 108\n\t\treturn codes.InvalidArgument\n\tcase ErrorUnrecoverablePosition.Code: // 112\n\t\treturn codes.OutOfRange\n\tcase ErrorConflict.Code: // 113\n\t\treturn codes.AlreadyExists\n\tdefault:\n\t\t// Default to Internal Error for unmapped errors.\n\t\t// In general should be avoided - all new API errors must be explicitly described here.\n\t\treturn codes.Internal\n\t}\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);