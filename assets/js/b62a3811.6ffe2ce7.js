"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[5327],{17801:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"flow_diagrams","title":"flow_diagrams","description":"For swimlanes.io:","source":"@site/versioned_docs/version-4/flow_diagrams.md","sourceDirName":".","slug":"/flow_diagrams","permalink":"/docs/4/flow_diagrams","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-4/flow_diagrams.md","tags":[],"version":"4","frontMatter":{}}');var s=t(74848),o=t(28453);const r={},a=void 0,c={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"For swimlanes.io:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Client <- App Backend: JWT\n\nnote:\nThe backend generates JWT for a user and passes it to the client side.\n\nClient -> Centrifugo: Client connects to Centrifugo with JWT\n\n...: {fas-spinner} Persistent connection established\n\nClient -> Centrifugo: Client issues channel subscribe requests\n\nCentrifugo --\x3e> Client: Client receives real-time updates from channels\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Client -> Centrifugo: Connect request\n\nnote:\nClient connects to Centrifugo without JWT.\n\nCentrifugo -> App backend: Sends request further (via HTTP or GRPC)\n\nnote: The application backend validates client connection and tells Centrifugo user credentials in Connect reply.\n\nApp backend -> Centrifugo: Connect reply\n\nCentrifugo -> Client: Connect Reply\n\n...: {fas-spinner} Persistent connection established\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Client -> App Backend: Publish request\n\nnote:\nClient sends data to publish to the application backend.\n\nBackend validates it, maybe modifies, optionally saves to the main database, constructs real-time update and publishes it to the Centrifugo server API.\n\nApp Backend -> Centrifugo: Publish over Centrifugo API\n\nCentrifugo --\x3e> Client: {far-bolt fa-lg} Real-time notification\n\nnote: Centrifugo delivers real-time message to active channel subscribers.\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Client -> App Backend: Publish request\n\nnote:\nClient sends data to publish to the application backend.\n\nBackend validates it, maybe modifies, optionally saves to the main database, constructs real-time update and publishes it to the Centrifugo server API.\n\nApp Backend -> Centrifugo: Publish over Centrifugo API\n\nCentrifugo --\x3e> Client: {far-bolt fa-lg} Real-time notification\n\nnote: Centrifugo delivers real-time message to active channel subscribers.\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);