"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[9620],{30433:(e,n,s)=>{s.d(n,{Z:()=>o});s(67294);var i=s(36905);const t={tabItem:"tabItem_Ymn6"};var c=s(85893);function o(e){let{children:n,hidden:s,className:o}=e;return(0,c.jsx)("div",{role:"tabpanel",className:(0,i.Z)(t.tabItem,o),hidden:s,children:n})}},22808:(e,n,s)=>{s.d(n,{Z:()=>y});var i=s(67294),t=s(36905),c=s(63735),o=s(16550),r=s(20613),l=s(34423),a=s(20636),d=s(99200);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:s}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:s,attributes:i,default:t}}=e;return{value:n,label:s,attributes:i,default:t}}))}(s);return function(e){const n=(0,a.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function p(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:s}=e;const t=(0,o.k6)(),c=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,l._X)(c),(0,i.useCallback)((e=>{if(!c)return;const n=new URLSearchParams(t.location.search);n.set(c,e),t.replace({...t.location,search:n.toString()})}),[c,t])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:t}=e,c=h(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=s.find((e=>e.default))??s[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:c}))),[a,u]=b({queryString:s,groupId:t}),[x,g]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,c]=(0,d.Nk)(s);return[t,(0,i.useCallback)((e=>{s&&c.set(e)}),[s,c])]}({groupId:t}),f=(()=>{const e=a??x;return p({value:e,tabValues:c})?e:null})();(0,r.Z)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:c}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,c]),tabValues:c}}var g=s(5730);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=s(85893);function m(e){let{className:n,block:s,selectedValue:i,selectValue:o,tabValues:r}=e;const l=[],{blockElementScrollPositionUntilNextRender:a}=(0,c.o5)(),d=e=>{const n=e.currentTarget,s=l.indexOf(n),t=r[s].value;t!==i&&(a(n),o(t))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=l.indexOf(e.currentTarget)+1;n=l[s]??l[0];break}case"ArrowLeft":{const s=l.indexOf(e.currentTarget)-1;n=l[s]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.Z)("tabs",{"tabs--block":s},n),children:r.map((e=>{let{value:n,label:s,attributes:c}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...c,className:(0,t.Z)("tabs__item",f.tabItem,c?.className,{"tabs__item--active":i===n}),children:s??n},n)}))})}function v(e){let{lazy:n,children:s,selectedValue:t}=e;const c=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=c.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:c.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function w(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,t.Z)("tabs-container",f.tabList),children:[(0,j.jsx)(m,{...n,...e}),(0,j.jsx)(v,{...n,...e})]})}function y(e){const n=(0,g.Z)();return(0,j.jsx)(w,{...e,children:u(e.children)},String(n))}},74413:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=s(85893),t=s(11151),c=s(22808),o=s(30433);const r={id:"client_api",title:"Client SDK API"},l=void 0,a={id:"transports/client_api",title:"Client SDK API",description:"Centrifugo has several client SDKs to establish a real-time connection with a server. Centrifugo SDKs use WebSocket as the main data transport and send/receive messages encoded according to our bidirectional protocol. That protocol is built on top of the Protobuf schema (both JSON and binary Protobuf formats are supported). It provides asynchronous communication, sending RPC, multiplexing subscriptions to channels, etc. Client SDK wraps the protocol and exposes a set of APIs to developers.",source:"@site/docs/transports/client_api.md",sourceDirName:"transports",slug:"/transports/client_api",permalink:"/docs/transports/client_api",draft:!1,unlisted:!1,editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/transports/client_api.md",tags:[],version:"current",frontMatter:{id:"client_api",title:"Client SDK API"},sidebar:"Transports",previous:{title:"Real-time transports",permalink:"/docs/transports/overview"},next:{title:"Client real-time SDKs",permalink:"/docs/transports/client_sdk"}},d={},u=[{value:"Client connection states",id:"client-connection-states",level:2},{value:"Client common options",id:"client-common-options",level:2},{value:"Client methods",id:"client-methods",level:2},{value:"Client connection token",id:"client-connection-token",level:2},{value:"Connection PING/PONG",id:"connection-pingpong",level:2},{value:"Subscription states",id:"subscription-states",level:2},{value:"Subscription management",id:"subscription-management",level:2},{value:"Listen to channel publications",id:"listen-to-channel-publications",level:2},{value:"Subscription recovery state",id:"subscription-recovery-state",level:2},{value:"Subscription common options",id:"subscription-common-options",level:2},{value:"Subscription methods",id:"subscription-methods",level:2},{value:"Subscription token",id:"subscription-token",level:2},{value:"Server-side subscriptions",id:"server-side-subscriptions",level:2},{value:"Error codes",id:"error-codes",level:2},{value:"Unsubscribe codes",id:"unsubscribe-codes",level:2},{value:"Disconnect codes",id:"disconnect-codes",level:2},{value:"RPC",id:"rpc",level:2},{value:"Channel history API",id:"channel-history-api",level:2},{value:"Presence and presence stats API",id:"presence-and-presence-stats-api",level:2},{value:"SDK common best practices",id:"sdk-common-best-practices",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Centrifugo has several client SDKs to establish a real-time connection with a server. Centrifugo SDKs use WebSocket as the main data transport and send/receive messages encoded according to our bidirectional protocol. That protocol is built on top of the ",(0,i.jsx)(n.a,{href:"https://github.com/centrifugal/protocol/blob/master/definitions/client.proto",children:"Protobuf schema"})," (both JSON and binary Protobuf formats are supported). It provides asynchronous communication, sending RPC, multiplexing subscriptions to channels, etc. Client SDK wraps the protocol and exposes a set of APIs to developers."]}),"\n",(0,i.jsxs)(n.p,{children:["This chapter describes the core concepts of client SDKs API. All our ",(0,i.jsx)(n.a,{href:"/docs/transports/client_sdk#list-of-client-sdks",children:"official real-time SDKs"})," follow this specification. This document describes behaviour visible to SDK user, if you want to find out low-level client protocol framing details \u2013 look at ",(0,i.jsx)(n.a,{href:"/docs/transports/client_protocol",children:"client protocol"})," document."]}),"\n",(0,i.jsxs)(n.p,{children:["Most examples here are written using our Javascript real-time SDK (",(0,i.jsx)(n.code,{children:"centrifuge-js"}),"), but all other Centrifugo connectors have very similar semantics and APIs very close to each other."]}),"\n",(0,i.jsx)(n.h2,{id:"client-connection-states",children:"Client connection states"}),"\n",(0,i.jsx)(n.p,{children:"Client connection has 4 states:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"disconnected"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"connecting"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"connected"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"closed"})}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"closed"})," state is only implemented by SDKs where it makes sense (need to clean up allocated resources when app gracefully shuts down \u2013 for example in Java SDK we close thread executors used internally)."]})}),"\n",(0,i.jsxs)(n.p,{children:["When a new Client is created it has a ",(0,i.jsx)(n.code,{children:"disconnected"})," state. To connect to a server ",(0,i.jsx)(n.code,{children:"connect()"})," method must be called. After calling connect Client moves to the ",(0,i.jsx)(n.code,{children:"connecting"})," state. If a Client can't connect to a server it attempts to create a connection with an exponential backoff algorithm (with ",(0,i.jsx)(n.a,{href:"https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/",children:"full jitter"}),"). If a connection to a server is successful then the state becomes ",(0,i.jsx)(n.code,{children:"connected"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If a connection is lost (due to a missing network for example, or due to reconnect advice received from a server, or due to some client-side error that can't be recovered without reconnecting) Client goes to the ",(0,i.jsx)(n.code,{children:"connecting"})," state again. In this state Client tries to reconnect (again, with an exponential backoff algorithm)."]}),"\n",(0,i.jsxs)(n.p,{children:["The Client's state can become ",(0,i.jsx)(n.code,{children:"disconnected"}),". This happens when Client's ",(0,i.jsx)(n.code,{children:"disconnect()"})," method was called by a developer. Also, this can happen due to server advice from a server, or due to a terminal problem that happened on the client-side."]}),"\n",(0,i.jsx)(n.p,{children:"Here is a program where we create a Client instance, set callbacks to listen to state updates and establish a connection with a server:"}),"\n","\n",(0,i.jsxs)(c.Z,{className:"unique-tabs",defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"Dart",value:"dart"},{label:"Swift",value:"swift"},{label:"Java",value:"java"},{label:"Go",value:"go"}],children:[(0,i.jsx)(o.Z,{value:"javascript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nclient.on('connecting', function(ctx) {\n    console.log('connecting', ctx);\n});\n\nclient.on('connected', function(ctx) {\n    console.log('connected', ctx);\n});\n\nclient.on('disconnected', function(ctx) {\n    console.log('disconnected', ctx);\n});\n\nclient.connect();\n"})})}),(0,i.jsx)(o.Z,{value:"dart",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final onEvent = (dynamic event) {\n    print('client event> $event');\n};\n\nfinal client = centrifuge.createClient(\n    'ws://localhost:8000/connection/websocket',\n    centrifuge.ClientConfig(),\n);\n\nclient.connecting.listen(onEvent);\nclient.connected.listen(onEvent);\nclient.disconnected.listen(onEvent);\n\nawait client.connect();\n"})})}),(0,i.jsx)(o.Z,{value:"swift",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'import SwiftCentrifuge\n\nclass ClientDelegate : NSObject, CentrifugeClientDelegate {\n    func onConnecting(_ c: CentrifugeClient, _ e: CentrifugeConnectingEvent) {\n        print("connecting", e.code, e.reason)\n    }\n    func onConnected(_ client: CentrifugeClient, _ e: CentrifugeConnectedEvent) {\n        print("connected with id", e.client)\n    }\n    func onDisconnected(_ client: CentrifugeClient, _ e: CentrifugeDisconnectedEvent) {\n        print("disconnected", e.code, e.reason)\n    }\n}\n\nlet config = CentrifugeClientConfig()\nlet endpoint = "ws://localhost:8000/connection/websocket"\nlet client = CentrifugeClient(endpoint: endpoint, config: config, delegate: ClientDelegate())\nclient.connect()\n'})})}),(0,i.jsx)(o.Z,{value:"java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'EventListener listener = new EventListener() {\n    @Override\n    public void onConnected(Client client, ConnectedEvent event) {\n        System.out.println("connected");\n    }\n    @Override\n    public void onConnecting(Client client, ConnectingEvent event) {\n        System.out.printf("connecting: %s%n", event.getReason());\n    }\n    @Override\n    public void onDisconnected(Client client, DisconnectedEvent event) {\n        System.out.printf("disconnected %d %s", event.getCode(), event.getReason());\n    }\n};\n\nOptions opts = new Options();\n\nClient client = new Client("ws://localhost:8000/connection/websocket", opts, listener);\n\nclient.connect();\n'})})}),(0,i.jsx)(o.Z,{value:"go",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'client := centrifuge.NewJsonClient(\n    "ws://localhost:8000/connection/websocket",\n    centrifuge.Config{},\n)\ndefer client.Close()\n\nclient.OnConnecting(func(e centrifuge.ConnectingEvent) {\n    log.Printf("Connecting - %d (%s)", e.Code, e.Reason)\n})\nclient.OnConnected(func(e centrifuge.ConnectedEvent) {\n    log.Printf("Connected with ID %s", e.ClientID)\n})\nclient.OnDisconnected(func(e centrifuge.DisconnectedEvent) {\n    log.Printf("Disconnected: %d (%s)", e.Code, e.Reason)\n})\n\n_ = client.connect()\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"In case of successful connection Client states will transition like this:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"disconnected"})," (initial) -> ",(0,i.jsx)(n.code,{children:"connecting"})," (",(0,i.jsx)(n.code,{children:"on('connecting')"})," called) -> ",(0,i.jsx)(n.code,{children:"connected"})," (",(0,i.jsx)(n.code,{children:"on('connected')"})," called)."]}),"\n",(0,i.jsx)(n.p,{children:"In case of already connected Client temporary lost a connection with a server and then successfully reconnected:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"connected"})," -> ",(0,i.jsx)(n.code,{children:"connecting"})," (",(0,i.jsx)(n.code,{children:"on('connecting')"})," called) -> ",(0,i.jsx)(n.code,{children:"connected"})," (",(0,i.jsx)(n.code,{children:"on('connected')"})," called)."]}),"\n",(0,i.jsx)(n.p,{children:"In case of already connected Client temporary lost a connection with a server, but got a terminal error upon reconnection:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"connected"})," -> ",(0,i.jsx)(n.code,{children:"connecting"})," (",(0,i.jsx)(n.code,{children:"on('connecting')"})," called) -> ",(0,i.jsx)(n.code,{children:"disconnected"})," (",(0,i.jsx)(n.code,{children:"on('disconnected')"})," called)."]}),"\n",(0,i.jsx)(n.p,{children:"In case of already connected Client came across terminal condition (for example, if during a connection token refresh application found that user has no permission to connect anymore):"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"connected"})," -> ",(0,i.jsx)(n.code,{children:"disconnected"})," (",(0,i.jsx)(n.code,{children:"on('disconnected')"})," called)."]}),"\n",(0,i.jsxs)(n.p,{children:["Both ",(0,i.jsx)(n.code,{children:"connecting"})," and ",(0,i.jsx)(n.code,{children:"disconnected"})," events have numeric ",(0,i.jsx)(n.code,{children:"code"})," and human-readable string ",(0,i.jsx)(n.code,{children:"reason"})," in their context, so you can look at them and find the exact reason why the Client went to the ",(0,i.jsx)(n.code,{children:"connecting"})," state or to the ",(0,i.jsx)(n.code,{children:"disconnected"})," state."]}),"\n",(0,i.jsx)(n.p,{children:"This diagram demonstrates possible Client state transitions:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Centrifugo scheme",src:s(77262).Z+"",width:"2352",height:"1700"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also listen for all errors happening internally (which are not reflected by state changes, for example, transport errors happening on initial connect, transport during reconnect, connection token refresh related errors, etc) while the client works by using ",(0,i.jsx)(n.code,{children:"error"})," event:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"client.on('error', function(ctx) {\n    console.log('client error', ctx);\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to disconnect from a server call ",(0,i.jsx)(n.code,{children:".disconnect()"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"client.disconnect();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this case ",(0,i.jsx)(n.code,{children:"on('disconnected')"})," will be called. You can call ",(0,i.jsx)(n.code,{children:"connect()"})," again when you need to establish a connection."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"closed"})," state implemented in SDKs where resources like internal queues, thread executors, etc must be cleaned up when the Client is not needed anymore. All subscriptions should automatically go to the ",(0,i.jsx)(n.code,{children:"unsubscribed"})," state upon closing. The client is not usable after going to a ",(0,i.jsx)(n.code,{children:"closed"})," state."]}),"\n",(0,i.jsx)(n.h2,{id:"client-common-options",children:"Client common options"}),"\n",(0,i.jsx)(n.p,{children:"There are several common options available when creating Client instance."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["option to set connection token and callback to get connection token upon expiration (see below ",(0,i.jsx)(n.a,{href:"#client-connection-token",children:"mode details"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"option to set connect data"}),"\n",(0,i.jsx)(n.li,{children:"option to configure operation timeout"}),"\n",(0,i.jsx)(n.li,{children:"tweaks for reconnect backoff algorithm (min delay, max delay)"}),"\n",(0,i.jsx)(n.li,{children:"configure max delay of server pings (to detect broken connection)"}),"\n",(0,i.jsxs)(n.li,{children:["configure headers to send in WebSocket upgrade request (except ",(0,i.jsx)(n.code,{children:"centrifuge-js"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"configure client name and version for analytics purpose"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"client-methods",children:"Client methods"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"connect()"})," \u2013 connect to a server"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"disconnect()"})," - disconnect from a server"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"close()"})," - close Client if not needed anymore"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"send(data)"})," - send asynchronous message to a server"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rpc(method, data)"})," - send arbitrary RPC and wait for response"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"client-connection-token",children:"Client connection token"}),"\n",(0,i.jsx)(n.p,{children:"All SDKs support connecting to Centrifugo with JWT. Initial connection token can be set in Client option upon initialization. Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const client = new Centrifuge('ws://localhost:8000/connection/websocket', {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE'\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"If the token sets connection expiration then the client SDK will keep the token refreshed. It does this by calling a special callback function. This callback must return a new token. If a new token with updated connection expiration is returned from callback then it's sent to Centrifugo. In case of error returned by your callback SDK will retry the operation after some jittered time."}),"\n",(0,i.jsx)(n.p,{children:"An example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function getToken() {\n    if (!loggedIn) {\n        return \"\"; // Empty token or pre-generated token for anonymous users.\n    }\n    // Fetch your application backend.\n    const res = await fetch('http://localhost:8000/centrifugo/connection_token');\n    if (!res.ok) {\n        if (res.status === 403) {\n            // Return special error to not proceed with token refreshes,\n            // client will be disconnected.\n            throw new Centrifuge.UnauthorizedError();\n        }\n        // Any other error thrown will result into token refresh re-attempts.\n        throw new Error(`Unexpected status code ${res.status}`);\n    }\n    const data = await res.json();\n    return data.token;\n}\n\nconst client = new Centrifuge(\n    'ws://localhost:8000/connection/websocket',\n    {\n        token: 'JWT-GENERATED-ON-BACKEND-SIDE', // Optional, getToken is enough.\n        getToken: getToken\n    }\n);\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["If initial token is not provided, but ",(0,i.jsx)(n.code,{children:"getToken"})," is specified \u2013 then SDK should assume that developer wants to use token authentication. In this case SDK should attempt to get a connection token before establishing an initial connection."]})}),"\n",(0,i.jsx)(n.h2,{id:"connection-pingpong",children:"Connection PING/PONG"}),"\n",(0,i.jsx)(n.p,{children:"PINGs sent by a server, a client should answer with PONGs upon receiving PING. If a client does not receive PING from a server for a long time (ping interval + configured delay) \u2013 the connection is considered broken and will be re-established."}),"\n",(0,i.jsx)(n.h2,{id:"subscription-states",children:"Subscription states"}),"\n",(0,i.jsxs)(n.p,{children:["Client allows subscribing on channels. This can be done by creating ",(0,i.jsx)(n.code,{children:"Subscription"})," object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const sub = centrifuge.newSubscription(channel);\nsub.subscribe();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When a",(0,i.jsx)(n.code,{children:"newSubscription"})," method is called Client allocates a new Subscription instance and saves it in the internal subscription registry. Having a registry of allocated subscriptions allows SDK to manage resubscribes upon reconnecting to a server. Centrifugo connectors do not allow creating two subscriptions to the same channel \u2013 in this case, ",(0,i.jsx)(n.code,{children:"newSubscription"})," can throw an exception."]}),"\n",(0,i.jsx)(n.p,{children:"Subscription has 3 states:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"unsubscribed"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"subscribing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"subscribed"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["When a new Subscription is created it has an ",(0,i.jsx)(n.code,{children:"unsubscribed"})," state."]}),"\n",(0,i.jsxs)(n.p,{children:["To initiate the actual process of subscribing to a channel ",(0,i.jsx)(n.code,{children:"subscribe()"})," method of Subscription instance should be called. After calling ",(0,i.jsx)(n.code,{children:"subscribe()"})," Subscription moves to ",(0,i.jsx)(n.code,{children:"subscribing"})," state."]}),"\n",(0,i.jsxs)(n.p,{children:["If subscription to a channel is not successful then depending on error type subscription can automatically resubscribe (with exponential backoff) or go to an ",(0,i.jsx)(n.code,{children:"unsubscribed"})," state (upon non-temporary error). If subscription to a channel is successful then the state becomes ",(0,i.jsx)(n.code,{children:"subscribed"}),"."]}),"\n",(0,i.jsxs)(c.Z,{className:"unique-tabs",defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"Dart",value:"dart"},{label:"Swift",value:"swift"},{label:"Java",value:"java"},{label:"Go",value:"go"}],children:[(0,i.jsx)(o.Z,{value:"javascript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const sub = client.newSubscription(channel);\n\nsub.on('subscribing', function(ctx) {\n    console.log('subscribing');\n});\n\nsub.on('subscribed', function(ctx) {\n    console.log('subscribed');\n});\n\nsub.on('unsubscribed', function(ctx) {\n    console.log('unsubscribed');\n});\n\nsub.subscribe();\n"})})}),(0,i.jsx)(o.Z,{value:"dart",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final onSubscriptionEvent = (dynamic event) async {\n  print('subscription $channel> $event');\n};\n\nfinal subscription = client.newSubscription(channel);\n\nsubscription.subscribing.listen(onSubscriptionEvent);\nsubscription.subscribed.listen(onSubscriptionEvent);\nsubscription.unsubscribed.listen(onSubscriptionEvent);\n\nawait subscription.subscribe();\n"})})}),(0,i.jsx)(o.Z,{value:"swift",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'class SubscriptionDelegate : NSObject, CentrifugeSubscriptionDelegate {\n    func onSubscribing(_ s: CentrifugeSubscription, _ e: CentrifugeSubscribingEvent) {\n        print("subscribing", e.code, e.reason)\n    }\n    func onSubscribed(_ s: CentrifugeSubscription, _ e: CentrifugeSubscribedEvent) {\n        print("subscribed")\n    }\n    func onUnsubscribed(_ s: CentrifugeSubscription, _ e: CentrifugeUnsubscribedEvent) {\n        print("unsubscribed", e.code, e.reason)\n    }\n}\n\ndo {\n    sub = try self.client?.newSubscription(channel: "example", delegate: SubscriptionDelegate())\n    sub!.subscribe()\n} catch {\n    print("Can not create subscription: \\(error)")\n}\n'})})}),(0,i.jsx)(o.Z,{value:"java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'SubscriptionEventListener subListener = new SubscriptionEventListener() {\n    @Override\n    public void onSubscribed(Subscription sub, SubscribedEvent event) {\n        System.out.println("subscribed to " + sub.getChannel());\n    }\n    @Override\n    public void onSubscribing(Subscription sub, SubscribingEvent event) {\n        System.out.printf("subscribing " + sub.getChannel());\n    }\n    @Override\n    public void onUnsubscribed(Subscription sub, UnsubscribedEvent event) {\n        System.out.println("unsubscribed " + sub.getChannel());\n    }\n};\n\nSubscription sub;\ntry {\n    sub = client.newSubscription("example", subListener);\n    sub.subscribe();\n} catch (DuplicateSubscriptionException e) {\n    e.printStackTrace();\n}\n'})})}),(0,i.jsx)(o.Z,{value:"go",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'sub, err := client.NewSubscription("example")\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nsub.OnSubscribing(func(e centrifuge.SubscribingEvent) {\n\tlog.Printf("Subscribing on channel %s - %d (%s)", sub.Channel, e.Code, e.Reason)\n})\nsub.OnSubscribed(func(e centrifuge.SubscribedEvent) {\n\tlog.Printf("Subscribed on channel %s", sub.Channel)\n})\nsub.OnUnsubscribed(func(e centrifuge.UnsubscribedEvent) {\n\tlog.Printf("Unsubscribed from channel %s - %d (%s)", sub.Channel, e.Code, e.Reason)\n})\n\nerr = sub.Subscribe()\nif err != nil {\n\tlog.Fatalln(err)\n}\n'})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Subscriptions also go to ",(0,i.jsx)(n.code,{children:"subscribing"})," state when Client connection (i.e. transport) becomes unavailable. Upon connection re-establishement all subscriptions which are not in ",(0,i.jsx)(n.code,{children:"unsubscribed"})," state will resubscribe automatically."]}),"\n",(0,i.jsx)(n.p,{children:"In case of successful subscription states will transition like this:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"unsubscribed"})," (initial) -> ",(0,i.jsx)(n.code,{children:"subscribing"})," (",(0,i.jsx)(n.code,{children:"on('subscribing')"})," called) -> ",(0,i.jsx)(n.code,{children:"subscribed"})," (",(0,i.jsx)(n.code,{children:"on('subscribed')"})," called)."]}),"\n",(0,i.jsx)(n.p,{children:"In case of connected and subscribed Client temporary lost a connection with a server and then succesfully reconnected and resubscribed:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"subscribed"})," -> ",(0,i.jsx)(n.code,{children:"subscribing"})," (",(0,i.jsx)(n.code,{children:"on('subscribing')"})," called) -> ",(0,i.jsx)(n.code,{children:"subscribed"})," (",(0,i.jsx)(n.code,{children:"on('subscribed')"})," called)."]}),"\n",(0,i.jsxs)(n.p,{children:["Both ",(0,i.jsx)(n.code,{children:"subscribing"})," and ",(0,i.jsx)(n.code,{children:"unsubscribed"})," events have numeric ",(0,i.jsx)(n.code,{children:"code"})," and human-readable string ",(0,i.jsx)(n.code,{children:"reason"})," in their context, so you can look at them and find the exact reason why Subscription went to subscribing state or to unsubscribed state."]}),"\n",(0,i.jsx)(n.p,{children:"This diagram demonstrates possible Subscription state transitions:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Centrifugo scheme",src:s(13305).Z+"",width:"2391",height:"1672"})}),"\n",(0,i.jsxs)(n.p,{children:["You can listen for all errors happening internally in Subscription (which are not reflected by state changes, for example, temporary subscribe errors, subscription token related errors, etc) by using ",(0,i.jsx)(n.code,{children:"error"})," event:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"sub.on('error', function(ctx) {\n    console.log(\"subscription error\", ctx);\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to unsubscribe from a channel call ",(0,i.jsx)(n.code,{children:".unsubscribe()"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"sub.unsubscribe();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this case ",(0,i.jsx)(n.code,{children:"on('unsubscribed')"})," will be called. Subscription still kept in Client's registry, but no resubscription attempts will be made. You can call ",(0,i.jsx)(n.code,{children:"subscribe()"})," again when you need Subscription again. Or you can remove Subscription from Client's registry (see below)."]}),"\n",(0,i.jsx)(n.h2,{id:"subscription-management",children:"Subscription management"}),"\n",(0,i.jsx)(n.p,{children:"The client SDK provides several methods to manage the internal registry of client-side subscriptions."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"newSubscription(channel, options)"})," allocates a new Subscription in the registry or throws an exception if the Subscription is already there. We will discuss common Subscription options below."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"getSubscription(channel)"})," returns the existing Subscription by a channel from the registry (or null if it does not exist)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"removeSubscription(sub)"})," removes Subscription from Client's registry. Subscription is automatically unsubscribed before being removed. Use this to free resources if you don't need a Subscription to a channel anymore."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"subscriptions()"})," returns all registered subscriptions, so you can iterate over all and do some action if required (for example, you want to unsubscribe/remove all subscriptions)."]}),"\n",(0,i.jsx)(n.h2,{id:"listen-to-channel-publications",children:"Listen to channel publications"}),"\n",(0,i.jsx)(n.p,{children:"Of course the main point of having Subscriptions is the ability to listen for publications (i.e. messages published to a channel)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"sub.on('publication', function(ctx) {\n    console.log(\"received publication\", ctx);\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Publication context has several fields:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data"})," - publication payload, this can be JSON or binary data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"offset"})," - optional offset inside history stream, this is an incremental number"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tags"})," - optional tags, this is a map with string keys and string values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"info"})," - optional information about client connection who published this (only exists if publication comes from client-side ",(0,i.jsx)(n.code,{children:"publish()"})," API)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["So minimal code where we connect to a server and listen for messages published into ",(0,i.jsx)(n.code,{children:"example"})," channel may look like:"]}),"\n",(0,i.jsxs)(c.Z,{className:"unique-tabs",defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"Dart",value:"dart"},{label:"Swift",value:"swift"},{label:"Java",value:"java"},{label:"Go",value:"go"}],children:[(0,i.jsx)(o.Z,{value:"javascript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nconst sub = client.newSubscription('example').on('publication', function(ctx) {\n    console.log(\"received publication from a channel\", ctx.data);\n});\n\nsub.subscribe();\n\nclient.connect();\n"})})}),(0,i.jsx)(o.Z,{value:"dart",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final client = centrifuge.createClient(\n    'ws://localhost:8000/connection/websocket',\n    centrifuge.ClientConfig(),\n);\n\nfinal subscription = client.newSubscription(channel);\nsubscription.publication.listen((event) {\n    print(event);\n});\nawait subscription.subscribe();\n\nawait client.connect();\n"})})}),(0,i.jsx)(o.Z,{value:"swift",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'import SwiftCentrifuge\n\nclass ClientDelegate : NSObject, CentrifugeClientDelegate {}\n\nlet config = CentrifugeClientConfig()\nlet endpoint = "ws://localhost:8000/connection/websocket"\nlet client = CentrifugeClient(endpoint: endpoint, config: config, delegate: ClientDelegate())\n\nclass SubscriptionDelegate : NSObject, CentrifugeSubscriptionDelegate {\n    func onPublication(_ s: CentrifugeSubscription, _ e: CentrifugePublicationEvent) {\n        print("publication", e.data)\n    }\n}\n\ndo {\n    sub = try self.client?.newSubscription(channel: "example", delegate: SubscriptionDelegate())\n    sub!.subscribe()\n} catch {\n    print("Can not create subscription: \\(error)")\n}\n\nclient.connect()\n'})})}),(0,i.jsx)(o.Z,{value:"java",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'EventListener listener = new EventListener() {};\nOptions opts = new Options();\nClient client = new Client("ws://localhost:8000/connection/websocket", opts, listener);\n\nSubscriptionEventListener subListener = new SubscriptionEventListener() {\n    @Override\n    public void onPublication(Subscription sub, PublicationEvent event) {\n        System.out.println("publication from " + sub.getChannel());\n    }\n};\n\nSubscription sub;\ntry {\n    sub = client.newSubscription("example", subListener);\n    sub.subscribe();\n} catch (DuplicateSubscriptionException e) {\n    e.printStackTrace();\n}\n\nclient.connect();\n'})})}),(0,i.jsx)(o.Z,{value:"go",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'client := centrifuge.NewJsonClient(\n    "ws://localhost:8000/connection/websocket",\n    centrifuge.Config{},\n)\n// defer client.Close()\n\nsub, err := client.NewSubscription("example")\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nsub.OnPublication(func(e centrifuge.PublicationEvent) {\n\tlog.Printf("Publication from channel")\n})\n\nerr = sub.Subscribe()\nif err != nil {\n\tlog.Fatalln(err)\n}\n\nif err = client.Connect(); err != nil {\n    log.Fatalln(err)\n}\n'})})})]}),"\n",(0,i.jsxs)(n.p,{children:["Note, that we can call ",(0,i.jsx)(n.code,{children:"subscribe()"})," before making a connection to a server \u2013 and this will work just fine, subscription goes to ",(0,i.jsx)(n.code,{children:"subscribing"})," state and will be subscribed upon succesfull connection. And of course, it's possible to call ",(0,i.jsx)(n.code,{children:".subscribe()"})," after ",(0,i.jsx)(n.code,{children:".connect()"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"subscription-recovery-state",children:"Subscription recovery state"}),"\n",(0,i.jsx)(n.p,{children:"Subscriptions to channels with recovery option enabled maintain stream position information internally. On every publication received this information updated and used to recover missed publications upon resubscribe (caused by reconnect for example)."}),"\n",(0,i.jsxs)(n.p,{children:["When you call ",(0,i.jsx)(n.code,{children:"unsubscribe()"})," Subscription position state is not cleared. So it's possible to call ",(0,i.jsx)(n.code,{children:"subscribe()"})," later and catch up a state."]}),"\n",(0,i.jsxs)(n.p,{children:["The recovery process result \u2013 i.e. whether all missed publications recovered or not \u2013 can be found in ",(0,i.jsx)(n.code,{children:"on('subscribed')"})," event context. Centrifuge protocol provides two fields:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"wasRecovering"})," - boolean flag that tells whether recovery was used during subscription process resulted into subscribed state. Can be useful if you want to distinguish first subscribe attempt (when subscription does not have any position information yet)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"recovered"})," - boolean flag that tells whether Centrifugo thinks that all missed publications can be successfully recovered and there is no need to load state from the main application database. It's always ",(0,i.jsx)(n.code,{children:"false"})," when ",(0,i.jsx)(n.code,{children:"wasRecovering"})," is ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"subscription-common-options",children:"Subscription common options"}),"\n",(0,i.jsx)(n.p,{children:"There are several common options available when creating Subscription instance."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["option to set subscription token and callback to get subscription token upon expiration (see ",(0,i.jsx)(n.a,{href:"#subscription-token",children:"below more details"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["option to set subscription ",(0,i.jsx)(n.code,{children:"data"})," (attached to every subscribe/resubscribe request)"]}),"\n",(0,i.jsx)(n.li,{children:"options to tweak resubscribe backoff algorithm"}),"\n",(0,i.jsxs)(n.li,{children:["option to start Subscription ",(0,i.jsx)(n.code,{children:"since"})," known Stream Position (i.e. attempt recovery on first subscribe)"]}),"\n",(0,i.jsxs)(n.li,{children:["option to ask server to make subscription ",(0,i.jsx)(n.code,{children:"positioned"})," (if not forced by a server)"]}),"\n",(0,i.jsxs)(n.li,{children:["option to ask server to make subscription ",(0,i.jsx)(n.code,{children:"recoverable"})," (if not forced by a server)"]}),"\n",(0,i.jsx)(n.li,{children:"option to ask server to push Join/Leave messages (if not forced by a server)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"subscription-methods",children:"Subscription methods"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"subscribe()"})," \u2013 start subscribing to a channel"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"unsubscribe()"})," - unsubscribe from a channel"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"publish(data)"})," - publish data to Subscription channel"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"history(options)"})," - request Subscription channel history"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"presence()"})," - request Subscription channel online presence information"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"presenceStats()"})," - request Subscription channel online presence stats information (number of client connections and unique users in a channel)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"subscription-token",children:"Subscription token"}),"\n",(0,i.jsx)(n.p,{children:"All SDKs support subscribing to Centrifugo channels with JWT. Channel subscription token can be set as a Subscription option upon initialization. Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const sub = centrifuge.newSubscription(channel, {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE'\n});\nsub.subscribe();\n"})}),"\n",(0,i.jsx)(n.p,{children:"If token sets subscription expiration client SDK will keep token refreshed. It does this by calling special callback function. This callback must return a new token. If new token with updated subscription expiration returned from a callback then it's sent to Centrifugo. If your callback returns an empty string \u2013 this means user has no permission to subscribe to a channel anymore and subscription will be unsubscribed. In case of error returned by your callback SDK will retry operation after some jittered time."}),"\n",(0,i.jsx)(n.p,{children:"An example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function getToken(ctx) {\n    // Fetch your application backend.\n    const res = await fetch('http://localhost:8000/centrifugo/subscription_token', {\n        method: 'POST',\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n        body: JSON.stringify({\n            channel: ctx.channel\n        })\n    });\n    if (!res.ok) {\n        if (res.status === 403) {\n            // Return special error to not proceed with token refreshes,\n            // client will be disconnected.\n            throw new Centrifuge.UnauthorizedError();\n        }\n        // Any other error thrown will result into token refresh re-attempts.\n        throw new Error(`Unexpected status code ${res.status}`);\n    }\n    const data = await res.json();\n    return data.token;\n}\n\nconst client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nconst sub = centrifuge.newSubscription(channel, {\n    token: 'JWT-GENERATED-ON-BACKEND-SIDE', // Optional, getToken is enough.\n    getToken: getToken\n});\nsub.subscribe();\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["If initial token is not provided, but ",(0,i.jsx)(n.code,{children:"getToken"})," is specified \u2013 then SDK should assume that developer wants to use token authorization for a channel subscription. In this case SDK should attempt to get a subscription token before initial subscribe."]})}),"\n",(0,i.jsx)(n.h2,{id:"server-side-subscriptions",children:"Server-side subscriptions"}),"\n",(0,i.jsx)(n.p,{children:"We encourage using client-side subscriptions where possible as they provide a better control and isolation from connection. But in some cases you may want to use server-side subscriptions (i.e. subscriptions created by server upon connection establishment)."}),"\n",(0,i.jsx)(n.p,{children:"Technically, client SDK keeps server-side subscriptions in internal registry (similar to client-side subscriptions but without possibility to control them)."}),"\n",(0,i.jsx)(n.p,{children:"To listen for server-side subscription events use callbacks as shown in example below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const client = new Centrifuge('ws://localhost:8000/connection/websocket', {});\n\nclient.on('subscribed', function(ctx) {\n    // Called when subscribed to a server-side channel upon Client moving to\n    // connected state or during connection lifetime if server sends Subscribe\n    // push message.\n    console.log('subscribed to server-side channel', ctx.channel);\n});\n\nclient.on('subscribing', function(ctx) {\n    // Called when existing connection lost (Client reconnects) or Client\n    // explicitly disconnected. Client continue keeping server-side subscription\n    // registry with stream position information where applicable.\n    console.log('subscribing to server-side channel', ctx.channel);\n});\n\nclient.on('unsubscribed', function(ctx) {\n    // Called when server sent unsubscribe push or server-side subscription\n    // previously existed in SDK registry disappeared upon Client reconnect.\n    console.log('unsubscribed from server-side channel', ctx.channel);\n});\n\nclient.on('publication', function(ctx) {\n    // Called when server sends Publication over server-side subscription.\n    console.log('publication receive from server-side channel', ctx.channel, ctx.data);\n});\n\nclient.connect();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Server-side subscription events mostly mimic events of client-side subscriptions. But again \u2013 they do not provide control to the client and managed entirely by a server side."}),"\n",(0,i.jsx)(n.p,{children:"Additionally, Client has several top-level methods to call with server-side subscription related operations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"publish(channel, data)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"history(channel, options)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"presence(channel)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"presenceStats(channel)"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"error-codes",children:"Error codes"}),"\n",(0,i.jsx)(n.p,{children:"Server can return error codes in range 100-1999. Error codes in interval 0-399 reserved by Centrifuge/Centrifugo server. Codes in range [400, 1999] may be returned by application code built on top of Centrifuge/Centrifugo."}),"\n",(0,i.jsxs)(n.p,{children:["Server errors contain a ",(0,i.jsx)(n.code,{children:"temporary"})," boolean flag which works as a signal that error may be fixed by a later retry."]}),"\n",(0,i.jsx)(n.p,{children:"Errors with codes 0-100 can be used by client-side implementation. Client-side errors may not have code attached at all since in many languages error can be distinguished by its type."}),"\n",(0,i.jsx)(n.h2,{id:"unsubscribe-codes",children:"Unsubscribe codes"}),"\n",(0,i.jsxs)(n.p,{children:["Server may return unsubscribe codes. Server unsubscribe codes must be in range ",(0,i.jsx)(n.code,{children:"[2000, 2999]"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Unsubscribe codes >= 2500 coming from server to client result into automatic resubscribe attempt (i.e. client goes to ",(0,i.jsx)(n.code,{children:"subscribing"})," state). Codes < 2500 result into going to ",(0,i.jsx)(n.code,{children:"unsubscribed"})," state."]}),"\n",(0,i.jsx)(n.p,{children:"Client implementation can use codes < 2000 for client-side specific unsubscribe reasons."}),"\n",(0,i.jsx)(n.h2,{id:"disconnect-codes",children:"Disconnect codes"}),"\n",(0,i.jsxs)(n.p,{children:["Server may send custom disconnect codes to a client. Custom disconnect codes must be in range ",(0,i.jsx)(n.code,{children:"[3000, 4999]"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Client automatically reconnects upon receiving code in range 3000-3499, 4000-4499 (i.e. Client goes to ",(0,i.jsx)(n.code,{children:"connecting"})," state). Other codes result into going to ",(0,i.jsx)(n.code,{children:"disconnected"})," state."]}),"\n",(0,i.jsx)(n.p,{children:"Client implementation can use codes < 3000 for client-side specific disconnect reasons."}),"\n",(0,i.jsx)(n.h2,{id:"rpc",children:"RPC"}),"\n",(0,i.jsxs)(n.p,{children:["An SDK provides a way to send RPC to a server. RPC is sent over the real-time connection - i.e. if your client uses WebSocket, then RPC will be sent over WebSocket, just like any other Centrifugo protocol command. In most cases RPC is only useful when ",(0,i.jsx)(n.a,{href:"/docs/server/proxy#rpc-proxy",children:"RPC proxy"})," is configured \u2013 so Centrifugo proxies the RPC to your application backend to be processed (otherwise, Centrifugo simply does not know how to react on such custom RPCs)."]}),"\n",(0,i.jsx)(n.p,{children:"RPC is not related to channels \u2013 it's a generic way to call the backend with some custom method and custom payload in the context of client real-time connection."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const rpcRequest = {'key': 'value'};\nconst data = await centrifuge.rpc('example_method', rpcRequest);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"channel-history-api",children:"Channel history API"}),"\n",(0,i.jsx)(n.p,{children:"SDK provides a method to call publication history inside a channel (only for channels where history is enabled) to get last publications in a channel."}),"\n",(0,i.jsx)(n.p,{children:"Get stream current top position:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const resp = await subscription.history();\nconsole.log(resp.offset);\nconsole.log(resp.epoch);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get up to 10 publications from history since known stream position:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const resp = await subscription.history({limit: 10, since: {offset: 0, epoch: '...'}});\nconsole.log(resp.publications);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get up to 10 publications from history since current stream beginning:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const resp = await subscription.history({limit: 10});\nconsole.log(resp.publications);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get up to 10 publications from history since current stream end in reversed order (last to first):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const resp = await subscription.history({limit: 10, reverse: true});\nconsole.log(resp.publications);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"presence-and-presence-stats-api",children:"Presence and presence stats API"}),"\n",(0,i.jsxs)(n.p,{children:["Once subscribed client can call presence and presence stats information inside channel (only for channels where ",(0,i.jsx)(n.a,{href:"/docs/server/channels#channel-options",children:"presence configured"}),"):"]}),"\n",(0,i.jsx)(n.p,{children:"For presence (full information about active subscribers in channel):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const resp = await subscription.presence();\n// resp contains presence information - a map client IDs as keys \n// and client information as values.\n"})}),"\n",(0,i.jsx)(n.p,{children:"For presence stats (just a number of clients and unique users in a channel):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const resp = await subscription.presenceStats();\n// resp contains a number of clients and a number of unique users.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"sdk-common-best-practices",children:"SDK common best practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Callbacks must be fast. Avoid blocking operations inside event handlers. Callbacks caused by protocol messages received from a server are called synchronously and connection read loop is blocked while such callbacks are being executed. Consider doing heavy work asynchronously."}),"\n",(0,i.jsx)(n.li,{children:"Do not blindly rely on the current Client or Subscription state when making client API calls \u2013 state can change at any moment, so don't forget to handle errors."}),"\n",(0,i.jsx)(n.li,{children:"Disconnect from a server when a mobile application goes to the background since a mobile OS can kill the connection at some point without any callbacks called."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},77262:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/client_state-34264b7a7eee2792baa58bb5bb525d46.png"},13305:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/sub_state-9dbaf6d2a6868264a330b1a3f4c59b39.png"},11151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>o});var i=s(67294);const t={},c=i.createContext(t);function o(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);