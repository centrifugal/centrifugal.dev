"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[9200],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var r=s(96540);const o={},a=r.createContext(o);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(a.Provider,{value:n},e.children)}},88992:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tutorial/backend","title":"Setting up backend and database","description":"Let\'s start building the app. As the first step, create a directory for the new app:","source":"@site/docs/tutorial/backend.md","sourceDirName":"tutorial","slug":"/tutorial/backend","permalink":"/docs/tutorial/backend","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/tutorial/backend.md","tags":[],"version":"current","frontMatter":{"id":"backend","sidebar_label":"Setting up backend and database","title":"Setting up backend and database"},"sidebar":"Tutorial","previous":{"title":"App layout and behavior","permalink":"/docs/tutorial/layout"},"next":{"title":"Adding reverse proxy","permalink":"/docs/tutorial/reverse_proxy"}}');var o=s(74848),a=s(28453);const t={id:"backend",sidebar_label:"Setting up backend and database",title:"Setting up backend and database"},i=void 0,l={},d=[{value:"Start Django project",id:"start-django-project",level:2},{value:"Creating models",id:"creating-models",level:2},{value:"Adding backend API",id:"adding-backend-api",level:2},{value:"GET /api/csrf/",id:"get-apicsrf",level:3},{value:"POST /api/login/",id:"post-apilogin",level:3},{value:"POST /api/logout/",id:"post-apilogout",level:3},{value:"GET /api/rooms/search/",id:"get-apiroomssearch",level:3},{value:"GET /api/rooms/",id:"get-apirooms",level:3},{value:"GET /api/rooms//messages/",id:"get-apiroomsmessages",level:3},{value:"POST /api/rooms//messages/",id:"post-apiroomsmessages",level:3},{value:"POST /api/rooms//join/",id:"post-apiroomsjoin",level:3},{value:"POST /api/rooms//leave/",id:"post-apiroomsleave",level:3},{value:"Register urls",id:"register-urls",level:3},{value:"Adding admin models",id:"adding-admin-models",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Let's start building the app. As the first step, create a directory for the new app:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir grand-chat-tutorial\ncd grand-chat-tutorial\ntouch docker-compose.yml\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We will use ",(0,o.jsx)(n.code,{children:"docker compose"})," to build the app. It will include several services at the end. If you are not familiar with Docker and Docker Compose - we recommend to ",(0,o.jsx)(n.a,{href:"https://gabrieltanner.org/blog/docker-compose/",children:"learn it first"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"start-django-project",children:"Start Django project"}),"\n",(0,o.jsx)(n.p,{children:"To start with Django project you will need Python 3. As soon as you have it run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"python3 -m venv env\n./env/bin/activate\npython -m pip install Django\npython -m django --version\ndjango-admin startproject app\nmv app backend\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will create ",(0,o.jsx)(n.code,{children:"backend"})," directory in your current directory with the following contents:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"backend/\n    manage.py\n    app/\n        __init__.py\n        asgi.py\n        settings.py\n        urls.py\n        wsgi.py\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"app"})," directory contains core settings and things to run Django app. For the main chat business logic let's create a new Django app:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd backend\npython manage.py startapp chat\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will create ",(0,o.jsx)(n.code,{children:"chat"})," folder with sth like this inside:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"chat/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py    \n"})}),"\n",(0,o.jsxs)(n.p,{children:["We need to tell our project that the chat app is installed. Edit the ",(0,o.jsx)(n.code,{children:"app/settings.py"})," file and add ",(0,o.jsx)(n.code,{children:"'chat'"})," to the ",(0,o.jsx)(n.code,{children:"INSTALLED_APPS"})," setting. It'll look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/app/settings.py"',children:"INSTALLED_APPS = [\n    'chat',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Our backend service will expose REST API for the frontend. The simplest way to add REST in Django is to use ",(0,o.jsx)(n.a,{href:"https://www.django-rest-framework.org/",children:"Django Rest framework"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install djangorestframework\npip freeze > requirements.txt\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Update ",(0,o.jsx)(n.code,{children:"INSTALLED_APPS"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/app/settings.py"',children:"INSTALLED_APPS = [\n    'rest_framework',\n    'chat',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For the main database we will use ",(0,o.jsx)(n.a,{href:"https://www.postgresql.org/",children:"PostgreSQL"})," here. Add ",(0,o.jsx)(n.code,{children:"db"})," to ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yml"',children:'version: \'3.8\'\n\nservices:\n  db:\n    image: postgres:15\n    volumes:\n      - ./postgres_data:/var/lib/postgresql/data/\n    healthcheck:\n      test: [ "CMD", "pg_isready", "-U", "grandchat" ]\n      interval: 1s\n      timeout: 5s\n      retries: 10\n    environment:\n      - POSTGRES_USER=grandchat\n      - POSTGRES_PASSWORD=grandchat\n      - POSTGRES_DB=grandchat\n    expose:\n      - 5432\n    ports:\n      - 5432:5432\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And properly set ",(0,o.jsx)(n.code,{children:"DATABASES"})," in Django app settings:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/app/settings.py"',children:"DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'grandchat',\n        'USER': 'grandchat',\n        'PASSWORD': 'grandchat',\n        'HOST': 'db',\n        'PORT': '5432',\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Note that in this example we are running everything in Docker, that's why database host is ",(0,o.jsx)(n.code,{children:"db"})," - it matches the service name in ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's also serve Django application when we are running docker compose. We will serve Django using ",(0,o.jsx)(n.a,{href:"https://gunicorn.org/",children:"Gunicorn"})," web server. To achieve that create custom Dockerfile inside ",(0,o.jsx)(n.code,{children:"backend"})," directory:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-Dockerfile",metastring:'title="backend/Dockerfile"',children:'FROM python:3.11.4-slim-buster\n\nWORKDIR /usr/src/app\n\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\nRUN pip install --upgrade pip\nCOPY ./requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD ["gunicorn",  "app.wsgi", "--reload", "--access-logfile", "-", \\\n    "--workers", "2", "--bind", "0.0.0.0:8000"]\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Here we are using ",(0,o.jsx)(n.code,{children:"gunicorn"})," with hot reload here to simplify development, of course you won't do this in production."]}),"\n",(0,o.jsxs)(n.p,{children:["Now add ",(0,o.jsx)(n.code,{children:"backend"})," service to ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yml"',children:"backend:\n  build: ./backend\n  volumes:\n    - ./backend:/usr/src/app\n  expose:\n    - 8000\n  depends_on:\n    db:\n      condition: service_healthy\n"})}),"\n",(0,o.jsx)(n.p,{children:"Note that we pass backend dir to the container, also passing and installing dependencies, as a result we will get Django app served and with hot reload upon source code changes."}),"\n",(0,o.jsx)(n.h2,{id:"creating-models",children:"Creating models"}),"\n",(0,o.jsx)(n.p,{children:"Django is great to quickly create domain models required for our messenger. Here is what we need:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User"})," \u2013 for user model we will use Django's built-in User model here"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Room"})," - the model that describes chat room with unique name"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RoomMember"})," \u2013 users can join and leave rooms, so this model contains many to many relationship between ",(0,o.jsx)(n.strong,{children:"User"})," and ",(0,o.jsx)(n.strong,{children:"Room"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Message"})," - this describes a message sent to room by some user (belongs to ",(0,o.jsx)(n.strong,{children:"Room"}),", has ",(0,o.jsx)(n.strong,{children:"User"})," \u2013 the author of message)"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Add the following to ",(0,o.jsx)(n.code,{children:"chat/models.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/models.py"',children:"from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Room(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    version = models.PositiveBigIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    bumped_at = models.DateTimeField(auto_now_add=True)\n    last_message = models.ForeignKey(\n        'Message', related_name='last_message_rooms',\n        on_delete=models.SET_NULL, null=True, blank=True,\n    )\n\n    def increment_version(self):\n        self.version += 1\n        self.save()\n        return self.version\n\n    def __str__(self):\n        return self.name\n\n\nclass RoomMember(models.Model):\n    room = models.ForeignKey(Room, related_name='memberships', on_delete=models.CASCADE)\n    user = models.ForeignKey(User, related_name='rooms', on_delete=models.CASCADE)\n    joined_at = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        unique_together = ('room', 'user')\n\n    def __str__(self):\n        return f\"{self.user.username} in {self.room.name}\"\n\n\nclass Message(models.Model):\n    room = models.ForeignKey(Room, related_name='messages', on_delete=models.CASCADE)\n    # Note, message may have null user \u2013 we consider such messages \"system\". These messages\n    # initiated by the backend and have no user author. We are not using such messages in\n    # the example currently, but leave the opportunity to extend.\n    user = models.ForeignKey(\n        User, related_name='messages', on_delete=models.CASCADE, null=True)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Having the models we now need to make database migrations and create tables for them. First run the app:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker compose up --build\n"})}),"\n",(0,o.jsx)(n.p,{children:"And from another terminal tab run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker compose exec backend python manage.py makemigrations\ndocker compose exec backend python manage.py migrate\n"})}),"\n",(0,o.jsx)(n.p,{children:"Let's also create an admin user (or better two!):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker compose exec backend python manage.py createsuperuser\n"})}),"\n",(0,o.jsx)(n.p,{children:"At this point we have a Django app with a configured database that has all the required tables for our app core entities. To access the app we will add one more element \u2013 Nginx reverse proxy. It's usually optional while developing, but in our case it's super-useful since we are building SPA-application and want to serve both frontend and backend from the same domain. But before moving to Nginx configuration we need to add some views to Django app \u2013 for user login/logout, and api for rooms, membership and messages."}),"\n",(0,o.jsx)(n.h2,{id:"adding-backend-api",children:"Adding backend API"}),"\n",(0,o.jsx)(n.p,{children:"We need to create some APIs for the application:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"An endpoint to return CSRF token"}),"\n",(0,o.jsx)(n.li,{children:"Endpoints for user login/logout"}),"\n",(0,o.jsx)(n.li,{children:"Endpoints for chat API \u2013 listing and searching rooms, listing and creating messages, joining/leaving chat rooms."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"CSRF and login/logout endpoints are rather trivial to implement with Django. For chat API using Django Rest Framework (DRF) simplifies the task for us drastically. We already defined models above, with DRF we just need to define serializers and viewsets for the desired routes."}),"\n",(0,o.jsx)(n.h3,{id:"get-apicsrf",children:"GET /api/csrf/"}),"\n",(0,o.jsxs)(n.p,{children:["We need a way to let the frontend to load CSRF token. Refer to the ",(0,o.jsx)(n.a,{href:"https://testdriven.io/blog/django-spa-auth/",children:"Django Session-based Auth for Single Page Apps"})," article which explains why we need to do that."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/app/views.py"',children:"from django.http import JsonResponse\nfrom django.middleware.csrf import get_token\n\n\ndef get_csrf(request):\n    return JsonResponse({}, headers={'X-CSRFToken': get_token(request)})\n"})}),"\n",(0,o.jsx)(n.h3,{id:"post-apilogin",children:"POST /api/login/"}),"\n",(0,o.jsx)(n.p,{children:"Simply using Django's functions for authenticating user here:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/app/views.py"',children:"import json\n\nfrom django.contrib.auth import authenticate, login\nfrom django.http import JsonResponse\nfrom django.views.decorators.http import require_POST\n\n\n@require_POST\ndef login_view(request):\n    credentials = json.loads(request.body)\n    username = credentials.get('username')\n    password = credentials.get('password')\n\n    if not username or not password:\n        return JsonResponse({'detail': 'provide username and password'}, status=400)\n\n    user = authenticate(username=username, password=password)\n    if not user:\n        return JsonResponse({'detail': 'invalid credentials'}, status=400)\n\n    login(request, user)\n    return JsonResponse({'user': {'id': user.pk, 'username': user.username}})\n"})}),"\n",(0,o.jsx)(n.h3,{id:"post-apilogout",children:"POST /api/logout/"}),"\n",(0,o.jsx)(n.p,{children:"Simply using Django's functions for log user out here:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/app/views.py"',children:"import json\n\nfrom django.contrib.auth import logout\nfrom django.http import JsonResponse\nfrom django.views.decorators.http import require_POST\n\n\n@require_POST\ndef logout_view(request):\n    if not request.user.is_authenticated:\n        return JsonResponse({'detail': 'must be authenticated'}, status=403)\n\n    logout(request)\n    return JsonResponse({})\n"})}),"\n",(0,o.jsx)(n.h3,{id:"get-apiroomssearch",children:"GET /api/rooms/search/"}),"\n",(0,o.jsxs)(n.p,{children:["For rooms search we will simply return all the rooms sorted by name. As mentioned before for the restful layer we work with models using Django Rest framework. This means we need to tell DRF how to serialize models describing ",(0,o.jsx)(n.code,{children:"Serializer"})," class and then we can use serializers in DRF predefined viewsets to create views."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/serializers.py"',children:"class RoomSearchSerializer(serializers.ModelSerializer):\n\n    is_member = serializers.BooleanField(read_only=True)\n    \n    class Meta:\n        model = Room\n        fields = ['id', 'name', 'created_at', 'updated_at', 'is_member']\n"})}),"\n",(0,o.jsx)(n.p,{children:"And:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/views.py"',children:"class RoomSearchViewSet(viewsets.ModelViewSet):\n    serializer_class = RoomSearchSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        user = self.request.user\n        user_membership = RoomMember.objects.filter(\n            room=OuterRef('pk'),\n            user=user\n        )\n        return Room.objects.annotate(\n            is_member=Exists(user_membership)\n        ).order_by('name')\n"})}),"\n",(0,o.jsx)(n.h3,{id:"get-apirooms",children:"GET /api/rooms/"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/serializers.py"',children:"class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username']\n\n\nclass LastMessageSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n\n    class Meta:\n        model = Message\n        fields = ['id', 'content', 'user', 'created_at']\n\nclass RoomSerializer(serializers.ModelSerializer):\n    member_count = serializers.SerializerMethodField()\n    last_message = LastMessageSerializer(read_only=True)\n\n    def get_member_count(self, obj):\n        return obj.member_count\n\n    class Meta:\n        model = Room\n        fields = ['id', 'name', 'version', 'member_count', 'last_message']\n"})}),"\n",(0,o.jsx)(n.p,{children:"And:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/views.py"',children:"class RoomListViewSet(ListModelMixin, GenericViewSet):\n    serializer_class = RoomSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        return Room.objects.annotate(\n            member_count=Count('memberships')\n        ).filter(\n            memberships__user_id=self.request.user.pk\n        ).prefetch_related('last_message', 'last_message__user').order_by('-memberships__joined_at')\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"get-apiroomsmessages",children:["GET /api/rooms/",":room_id","/messages/"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/serializers.py"',children:"class MessageRoomSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Room\n        fields = ['id', 'version']\n\n\nclass MessageSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    room = MessageRoomSerializer(read_only=True)\n\n    class Meta:\n        model = Message\n        fields = ['id', 'content', 'user', 'room', 'created_at']\n\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/views.py"',children:"class MessageListCreateAPIView(ListCreateAPIView):\n    serializer_class = MessageSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        room_id = self.kwargs['room_id']\n        get_object_or_404(RoomMember, user=self.request.user, room_id=room_id)\n        return Message.objects.filter(\n            room_id=room_id).prefetch_related('user', 'room').order_by('-created_at')\n\n    @transaction.atomic\n    def create(self, request, *args, **kwargs):\n        # Will be shown below.\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"post-apiroomsmessages",children:["POST /api/rooms/",":room_id","/messages/"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/views.py"',children:"class MessageListCreateAPIView(ListCreateAPIView):\n    serializer_class = MessageSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        # Shown above.\n\n    @transaction.atomic\n    def create(self, request, *args, **kwargs):\n        room_id = self.kwargs['room_id']\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        channels = self.get_room_member_channels(room_id)\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        obj = serializer.save(room=room, user=request.user)\n        room.last_message = obj\n        room.bumped_at = timezone.now()\n        room.save()\n        headers = self.get_success_headers(serializer.data)\n        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Note we make actions here in transaction (using ",(0,o.jsx)(n.code,{children:"@transaction.atomic"}),"), and also use ",(0,o.jsx)(n.code,{children:"select_for_update"})," method to lock the room while we are working with it. This allows us to atomically increment Room version on every change. We will show how having incremental version inside each room helps us on the frontend side later in the tutorial."]}),"\n",(0,o.jsxs)(n.p,{children:["While creating new message we set ",(0,o.jsx)(n.code,{children:"room.bumped_at"})," to current time \u2013 so that we have a desired sort on the frontend side."]}),"\n",(0,o.jsxs)(n.h3,{id:"post-apiroomsjoin",children:["POST /api/rooms/",":room_id","/join/"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/serializers.py"',children:"class RoomMemberSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    room = RoomSerializer(read_only=True)\n    \n    class Meta:\n        model = RoomMember\n        fields = ['room', 'user']\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/views.py"',children:'class JoinRoomView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        if RoomMember.objects.filter(user=request.user, room=room).exists():\n            return Response({"message": "already a member"}, status=status.HTTP_409_CONFLICT)\n        obj, _ = RoomMember.objects.get_or_create(user=request.user, room=room)\n        channels = self.get_room_member_channels(room_id)\n        obj.room.member_count = len(channels)\n        body = RoomMemberSerializer(obj).data\n        return Response(body, status=status.HTTP_200_OK)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Here we add the current request user into the room."}),"\n",(0,o.jsxs)(n.h3,{id:"post-apiroomsleave",children:["POST /api/rooms/",":room_id","/leave/"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/views.py"',children:"class LeaveRoomView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    @transaction.atomic\n    def post(self, request, room_id):\n        room = Room.objects.select_for_update().get(id=room_id)\n        room.increment_version()\n        channels = self.get_room_member_channels(room_id)\n        obj = get_object_or_404(RoomMember, user=request.user, room=room)\n        obj.room.member_count = len(channels) - 1\n        pk = obj.pk\n        obj.delete()\n        body = RoomMemberSerializer(obj).data\n        return Response(body, status=status.HTTP_200_OK)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Here we remove the current request user from the room."}),"\n",(0,o.jsx)(n.h3,{id:"register-urls",children:"Register urls"}),"\n",(0,o.jsx)(n.p,{children:"After serializers and view written, we just need to add urls to route requests to views:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/chat/urls.py"',children:"from django.urls import path\n\nfrom .views import RoomListViewSet, RoomDetailViewSet, RoomSearchViewSet, \\\n    MessageListCreateAPIView, JoinRoomView, LeaveRoomView\n\n\nurlpatterns = [\n    path('rooms/', RoomListViewSet.as_view({'get': 'list'}), name='room-list'),\n    path('rooms/<int:pk>/', RoomDetailViewSet.as_view({'get': 'retrieve'}), name='room-detail'),\n    path('search/', RoomSearchViewSet.as_view({'get': 'list'}), name='room-search'),\n    path('rooms/<int:room_id>/messages/', MessageListCreateAPIView.as_view(), name='room-messages'),\n    path('rooms/<int:room_id>/join/', JoinRoomView.as_view(), name='join-room'),\n    path('rooms/<int:room_id>/leave/', LeaveRoomView.as_view(), name='leave-room')\n]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And in ",(0,o.jsx)(n.code,{children:"app/urls.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="backend/app/urls.py"',children:"from django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\nfrom . import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/csrf/', views.get_csrf, name='api-csrf'),\n    path('api/token/connection/', views.get_connection_token, name='api-connection-token'),\n    path('api/token/subscription/', views.get_subscription_token, name='api-subscription-token'),\n    path('api/login/', views.login_view, name='api-login'),\n    path('api/logout/', views.logout_view, name='api-logout'),\n    path('api/', include('chat.urls')),\n]\n\nurlpatterns += staticfiles_urlpatterns()\n"})}),"\n",(0,o.jsx)(n.p,{children:"So we included all the views we wrote, included chat application urls."}),"\n",(0,o.jsx)(n.h3,{id:"adding-admin-models",children:"Adding admin models"}),"\n",(0,o.jsxs)(n.p,{children:["We also serving Django built-in admin - it will allow us to create some rooms to play with. In the example source code you may find some additional code in ",(0,o.jsx)(n.code,{children:"backend/chat/admin.py"})," which registers models in Django admin. After adding Nginx you will be able to start the app and go to ",(0,o.jsx)(n.a,{href:"http://localhost:9000/admin",children:"http://localhost:9000/admin"})," \u2013 and create some rooms. Let's add Nginx now."]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);