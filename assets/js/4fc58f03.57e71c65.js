"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[8238],{8626:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=i(85893),t=i(11151);const s={id:"uni_grpc",title:"Unidirectional GRPC",sidebar_label:"GRPC"},o=void 0,a={id:"transports/uni_grpc",title:"Unidirectional GRPC",description:"It's possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side.",source:"@site/docs/transports/uni_grpc.md",sourceDirName:"transports",slug:"/transports/uni_grpc",permalink:"/docs/transports/uni_grpc",draft:!1,unlisted:!1,editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/transports/uni_grpc.md",tags:[],version:"current",frontMatter:{id:"uni_grpc",title:"Unidirectional GRPC",sidebar_label:"GRPC"},sidebar:"Transports",previous:{title:"SSE (EventSource)",permalink:"/docs/transports/uni_sse"}},c={},l=[{value:"Supported data formats",id:"supported-data-formats",level:2},{value:"Options",id:"options",level:2},{value:"uni_grpc.enabled",id:"uni_grpcenabled",level:3},{value:"uni_grpc.port",id:"uni_grpcport",level:3},{value:"uni_grpc.address",id:"uni_grpcaddress",level:3},{value:"uni_grpc.max_receive_message_size",id:"uni_grpcmax_receive_message_size",level:3},{value:"uni_grpc.tls",id:"uni_grpctls",level:3},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"It's possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side."}),"\n",(0,r.jsxs)(n.p,{children:["Protobuf definitions can be found ",(0,r.jsx)(n.a,{href:"https://github.com/centrifugal/centrifugo/blob/master/internal/unigrpc/unistream/unistream.proto",children:"here"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["We publish ",(0,r.jsx)(n.a,{href:"https://buf.build/centrifugo/unistream/docs/main:centrifugal.centrifugo.unistream",children:"Centrifugo GRPC uni stream Protobuf definitions"})," to ",(0,r.jsx)(n.a,{href:"https://buf.build/product/bsr",children:"Buf Schema Registry"}),". This means that it's possible to depend on pre-generated Protobuf definitions for your programming language instead of manually generating them from the schema file (see ",(0,r.jsx)(n.a,{href:"https://buf.build/centrifugo/unistream/sdks",children:"SDKs supported by Buf registry here"}),")."]})}),"\n",(0,r.jsx)(n.p,{children:"Can be enabled using:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:"title=config.json",children:'{\n  "uni_grpc": {\n    "enabled": true\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["GRPC server will start on port ",(0,r.jsx)(n.code,{children:"11000"})," (default)."]}),"\n",(0,r.jsx)(n.h2,{id:"supported-data-formats",children:"Supported data formats"}),"\n",(0,r.jsx)(n.p,{children:"JSON and binary."}),"\n",(0,r.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.h3,{id:"uni_grpcenabled",children:"uni_grpc.enabled"}),"\n",(0,r.jsxs)(n.p,{children:["Boolean, default: ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Enables unidirectional GRPC endpoint."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "uni_grpc": {\n        "enabled": true\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"uni_grpcport",children:"uni_grpc.port"}),"\n",(0,r.jsxs)(n.p,{children:["String, default ",(0,r.jsx)(n.code,{children:'"11000"'}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Port to listen on."}),"\n",(0,r.jsx)(n.h3,{id:"uni_grpcaddress",children:"uni_grpc.address"}),"\n",(0,r.jsxs)(n.p,{children:["String, default ",(0,r.jsx)(n.code,{children:'""'})," (listen on all interfaces)"]}),"\n",(0,r.jsx)(n.p,{children:"Address to bind uni GRPC to."}),"\n",(0,r.jsx)(n.h3,{id:"uni_grpcmax_receive_message_size",children:"uni_grpc.max_receive_message_size"}),"\n",(0,r.jsxs)(n.p,{children:["Default: ",(0,r.jsx)(n.code,{children:"65536"})," (64KB)"]}),"\n",(0,r.jsx)(n.p,{children:"Maximum allowed size of a first connect message received from GRPC connection in bytes."}),"\n",(0,r.jsx)(n.h3,{id:"uni_grpctls",children:"uni_grpc.tls"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/server/tls#unified-tls-config-object",children:"TLSConfig"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Allows configuring TLS for unidirectional GRPC server."}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["We have ",(0,r.jsx)(n.a,{href:"https://github.com/centrifugal/examples/tree/master/v4/unidirectional/grpc",children:"example for Go"})," language. In general, the algorithm is like this:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Copy Protobuf definitions"}),"\n",(0,r.jsx)(n.li,{children:"Generate GRPC client code"}),"\n",(0,r.jsx)(n.li,{children:"Use generated code to connect to Centrifugo"}),"\n",(0,r.jsx)(n.li,{children:"Process Push messages, drop unknown Pushes, handle those necessary for the application."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var r=i(67294);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);