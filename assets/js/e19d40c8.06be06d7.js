"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[6939],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},30253:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"transports/uni_http_stream","title":"Unidirectional HTTP streaming","description":"HTTP streaming is a technique based on using a long-lived HTTP connection between a client and a server with a chunked transfer encoding. These days it\'s possible to use it from the web browser using modern Fetch and Readable Streams API. See example below.","source":"@site/docs/transports/uni_http_stream.md","sourceDirName":"transports","slug":"/transports/uni_http_stream","permalink":"/docs/transports/uni_http_stream","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/transports/uni_http_stream.md","tags":[],"version":"current","frontMatter":{"id":"uni_http_stream","title":"Unidirectional HTTP streaming","sidebar_label":"HTTP streaming"},"sidebar":"Transports","previous":{"title":"WebSocket","permalink":"/docs/transports/uni_websocket"},"next":{"title":"Server-Sent Events (SSE)","permalink":"/docs/transports/uni_sse"}}');var r=t(74848),i=t(28453);const o={id:"uni_http_stream",title:"Unidirectional HTTP streaming",sidebar_label:"HTTP streaming"},a=void 0,c={},l=[{value:"How to enable",id:"how-to-enable",level:2},{value:"Default endpoint",id:"default-endpoint",level:2},{value:"Send connect request",id:"send-connect-request",level:2},{value:"Supported data formats",id:"supported-data-formats",level:2},{value:"Ping",id:"ping",level:2},{value:"<code>uni_http_stream</code>",id:"uni_http_stream",level:2},{value:"<code>uni_http_stream.enabled</code>",id:"uni_http_streamenabled",level:3},{value:"<code>uni_http_stream.max_request_body_size</code>",id:"uni_http_streammax_request_body_size",level:3},{value:"Example connect with CURL",id:"example-connect-with-curl",level:2},{value:"Browser example",id:"browser-example",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["HTTP streaming is a technique based on using a long-lived HTTP connection between a client and a server with a chunked transfer encoding. These days it's possible to use it from the web browser using modern ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",children:"Fetch"})," and ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream",children:"Readable Streams"})," API. See ",(0,r.jsx)(n.a,{href:"#browser-example",children:"example"})," below."]}),"\n",(0,r.jsx)(n.h2,{id:"how-to-enable",children:"How to enable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:"title=config.json",children:'{\n  "uni_http_stream": {\n    "enabled": true\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"default-endpoint",children:"Default endpoint"}),"\n",(0,r.jsx)(n.p,{children:"Default unidirectional HTTP streaming connection endpoint in Centrifugo is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/connection/uni_http_stream\n"})}),"\n",(0,r.jsx)(n.p,{children:"Streaming endpoint accepts HTTP POST requests and sends JSON messages to a connection. These JSON messages can have different meaning according to Centrifuge protocol Protobuf definitions. But in most cases you will be interested in Publication push types."}),"\n",(0,r.jsx)(n.h2,{id:"send-connect-request",children:"Send connect request"}),"\n",(0,r.jsxs)(n.p,{children:["It's possible to pass initial ",(0,r.jsx)(n.a,{href:"/docs/transports/uni_client_protocol#connectrequest",children:"ConnectRequest"})," by posting a JSON body to a streaming endpoint."]}),"\n",(0,r.jsx)(n.h2,{id:"supported-data-formats",children:"Supported data formats"}),"\n",(0,r.jsx)(n.p,{children:"JSON"}),"\n",(0,r.jsx)(n.h2,{id:"ping",children:"Ping"}),"\n",(0,r.jsxs)(n.p,{children:["Centrifugo will send different message types to a connection. Every message is JSON encoded. A special JSON value ",(0,r.jsx)(n.code,{children:"null"})," used as a PING message. You can simply ignore it on a client side upon receiving. You can ignore such messages or use them to detect broken connections (nothing received from a server for a long time)."]}),"\n",(0,r.jsx)(n.h2,{id:"uni_http_stream",children:(0,r.jsx)(n.code,{children:"uni_http_stream"})}),"\n",(0,r.jsx)(n.h3,{id:"uni_http_streamenabled",children:(0,r.jsx)(n.code,{children:"uni_http_stream.enabled"})}),"\n",(0,r.jsxs)(n.p,{children:["Boolean, default: ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Enables unidirectional HTTP streaming endpoint."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "uni_http_stream": {\n        "enabled": true\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"uni_http_streammax_request_body_size",children:(0,r.jsx)(n.code,{children:"uni_http_stream.max_request_body_size"})}),"\n",(0,r.jsx)(n.p,{children:"Default: 65536 (64KB)"}),"\n",(0,r.jsx)(n.p,{children:"Maximum allowed size of a initial HTTP POST request in bytes."}),"\n",(0,r.jsx)(n.h2,{id:"example-connect-with-curl",children:"Example connect with CURL"}),"\n",(0,r.jsx)(n.p,{children:"Let's look how simple it is to connect to Centrifugo using HTTP streaming."}),"\n",(0,r.jsx)(n.p,{children:"We will start from scratch, generate new configuration file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"centrifugo genconfig\n"})}),"\n",(0,r.jsx)(n.p,{children:"Turn on uni HTTP stream and automatically subscribe users to personal channel upon connect:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n  "client": {\n    "subscribe_to_user_personal_channel": {\n      "enabled": true\n    }\n  },\n  "uni_http_stream": {\n    "enabled": {\n      "enabled": true\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Run Centrifugo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"centrifugo -c config.json\n"})}),"\n",(0,r.jsx)(n.p,{children:"In separate terminal window create token for a user:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"\u276f go run main.go gentoken -u user12\nHMAC SHA-256 JWT for user user12 with expiration TTL 168h0m0s:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then connect to Centrifugo uni HTTP stream endpoint with simple CURL POST request:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8000/connection/uni_http_stream \\\n    -d \'{"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIiLCJleHAiOjE2MjUwNzMyODh9.BxmS4R-X6YXMxLfXNhYRzeHvtu_M2NCaXF6HNu7VnDM"}\'\n'})}),"\n",(0,r.jsx)(n.p,{children:"Open one more terminal window and publish message to a personal user channel:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8000/api/publish \\\n    -d \'{"channel": "#user12", "data": {"input": "hello"}}\' \\\n    -H "Authorization: apikey 9230f514-34d2-4971-ace2-851c656e81dc"\n'})}),"\n",(0,r.jsx)(n.p,{children:"You should see this messages coming from server."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"{}"})," messages are pings from a server."]}),"\n",(0,r.jsx)(n.p,{children:"That's all, happy streaming!"}),"\n",(0,r.jsx)(n.h2,{id:"browser-example",children:"Browser example"}),"\n",(0,r.jsx)(n.p,{children:"It's possible to connect to HTTP-streaming from web browser and use Readable Streams API to process incoming messages."}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example using ",(0,r.jsx)(n.code,{children:"fetch"})," and using Readable Streams API to parse new line delimited JSON messages:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const token = 'CENTRIFUGO_JWT_TOKEN_HERE';\n\nfetch('http://localhost:8000/connection/uni_http_stream', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ token })\n})\n    .then(response => {\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder('utf-8');\n        let buffer = '';\n\n        function read() {\n            reader.read().then(({ done, value }) => {\n                if (done) {\n                    console.log('Stream complete');\n                    return;\n                }\n\n                // Decode the new chunk and append to the buffer.\n                buffer += decoder.decode(value, { stream: true });\n\n                // Split the buffer on newlines.\n                const lines = buffer.split('\\n');\n\n                // The last element may be an incomplete message; keep it in the buffer.\n                buffer = lines.pop();\n\n                // Process each complete line.\n                for (const line of lines) {\n                    if (!line.trim()) continue; // Skip empty lines (e.g., ping messages could be null)\n\n                    try {\n                        const message = JSON.parse(line);\n                        // Process your message here.\n                        console.log('Received message:', message);\n                    } catch (error) {\n                        console.error('Error parsing JSON:', error);\n                    }\n                }\n\n                // Continue reading the next chunk.\n                read();\n            });\n        }\n\n        read();\n    })\n    .catch(error => {\n        console.error('Fetch error:', error);\n    });\n"})}),"\n",(0,r.jsx)(n.p,{children:"How it works:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fetch request"}),": a POST request is sent to the Centrifugo uni HTTP stream endpoint with the JWT token in the body. As always, if you are using ",(0,r.jsx)(n.a,{href:"/docs/server/proxy#connect-proxy",children:"connect proxy"})," \u2013 then you can go without JWT for authentication. Same concepts as for bidirectional connection here."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Readable Stream"}),": the response's body is a ",(0,r.jsx)(n.code,{children:"ReadableStream"}),". We obtain a reader via ",(0,r.jsx)(n.code,{children:"response.body.getReader()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Buffer and Decoding"}),": Data chunks are decoded into a string and appended to a buffer. The buffer is split by newline characters to get complete JSON messages."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Processing Lines"}),": Each complete line is parsed using JSON.parse. You can handle parsed ",(0,r.jsx)(n.a,{href:"/docs/transports/uni_client_protocol#unidirectional-pushes",children:"push messages"})," as needed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recursive Read"}),": The function read continues to pull new data until the stream is complete."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);