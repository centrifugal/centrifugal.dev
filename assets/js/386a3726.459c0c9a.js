"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[5763],{28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var r=i(96540);const s={},t=r.createContext(s);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(t.Provider,{value:n},e.children)}},69392:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"transports/uni_grpc","title":"Unidirectional GRPC","description":"It\'s possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side.","source":"@site/versioned_docs/version-4/transports/uni_grpc.md","sourceDirName":"transports","slug":"/transports/uni_grpc","permalink":"/docs/4/transports/uni_grpc","draft":false,"unlisted":false,"editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-4/transports/uni_grpc.md","tags":[],"version":"4","frontMatter":{"id":"uni_grpc","title":"Unidirectional GRPC","sidebar_label":"GRPC"},"sidebar":"Transports","previous":{"title":"SSE (EventSource)","permalink":"/docs/4/transports/uni_sse"}}');var s=i(74848),t=i(28453);const c={id:"uni_grpc",title:"Unidirectional GRPC",sidebar_label:"GRPC"},l=void 0,o={},d=[{value:"Supported data formats",id:"supported-data-formats",level:2},{value:"Options",id:"options",level:2},{value:"uni_grpc",id:"uni_grpc",level:3},{value:"uni_grpc_port",id:"uni_grpc_port",level:3},{value:"uni_grpc_address",id:"uni_grpc_address",level:3},{value:"uni_grpc_max_receive_message_size",id:"uni_grpc_max_receive_message_size",level:3},{value:"uni_grpc_tls",id:"uni_grpc_tls",level:3},{value:"uni_grpc_tls_cert",id:"uni_grpc_tls_cert",level:3},{value:"uni_grpc_tls_key",id:"uni_grpc_tls_key",level:3},{value:"Example",id:"example",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"It's possible to connect to GRPC unidirectional stream to consume real-time messages from Centrifugo. In this case you need to generate GRPC code for your language on client-side."}),"\n",(0,s.jsxs)(n.p,{children:["Protobuf definitions can be found ",(0,s.jsx)(n.a,{href:"https://github.com/centrifugal/centrifugo/blob/master/internal/unigrpc/unistream/unistream.proto",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["GRPC server will start on port ",(0,s.jsx)(n.code,{children:"11000"})," (default)."]}),"\n",(0,s.jsx)(n.h2,{id:"supported-data-formats",children:"Supported data formats"}),"\n",(0,s.jsx)(n.p,{children:"JSON and binary."}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(n.h3,{id:"uni_grpc",children:"uni_grpc"}),"\n",(0,s.jsxs)(n.p,{children:["Boolean, default: ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Enables unidirectional GRPC endpoint."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="config.json"',children:'{\n    ...\n    "uni_grpc": true\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"uni_grpc_port",children:"uni_grpc_port"}),"\n",(0,s.jsxs)(n.p,{children:["String, default ",(0,s.jsx)(n.code,{children:'"11000"'}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Port to listen on."}),"\n",(0,s.jsx)(n.h3,{id:"uni_grpc_address",children:"uni_grpc_address"}),"\n",(0,s.jsxs)(n.p,{children:["String, default ",(0,s.jsx)(n.code,{children:'""'})," (listen on all interfaces)"]}),"\n",(0,s.jsx)(n.p,{children:"Address to bind uni GRPC to."}),"\n",(0,s.jsx)(n.h3,{id:"uni_grpc_max_receive_message_size",children:"uni_grpc_max_receive_message_size"}),"\n",(0,s.jsxs)(n.p,{children:["Default: ",(0,s.jsx)(n.code,{children:"65536"})," (64KB)"]}),"\n",(0,s.jsx)(n.p,{children:"Maximum allowed size of a first connect message received from GRPC connection in bytes."}),"\n",(0,s.jsx)(n.h3,{id:"uni_grpc_tls",children:"uni_grpc_tls"}),"\n",(0,s.jsxs)(n.p,{children:["Boolean, default: ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsx)(n.p,{children:"Enable custom TLS for unidirectional GRPC server."}),"\n",(0,s.jsx)(n.h3,{id:"uni_grpc_tls_cert",children:"uni_grpc_tls_cert"}),"\n",(0,s.jsxs)(n.p,{children:["String, default: ",(0,s.jsx)(n.code,{children:'""'}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Path to cert file."}),"\n",(0,s.jsx)(n.h3,{id:"uni_grpc_tls_key",children:"uni_grpc_tls_key"}),"\n",(0,s.jsxs)(n.p,{children:["String, default: ",(0,s.jsx)(n.code,{children:'""'}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Path to key file."}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"A basic example will come soon as we update docs for v4. In general, algorithm is like this:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Copy Protobuf definitions"}),"\n",(0,s.jsx)(n.li,{children:"Generate GRPC client code"}),"\n",(0,s.jsx)(n.li,{children:"Use generated code to connect to Centrifugo"}),"\n",(0,s.jsx)(n.li,{children:"Process Push messages, drop unknown Push types, handle those necessary for the application."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);