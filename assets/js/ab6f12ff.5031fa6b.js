"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[5527],{17498:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/keycloak_sso_cover-daacf4ddab590133cca999d8c13c38ed.jpg"},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>s});var o=t(96540);const i={},a=o.createContext(i);function c(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(a.Provider,{value:n},e.children)}},35629:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/03/31/keycloak-sso-centrifugo","editUrl":"https://github.com/centrifugal/centrifugal.dev/edit/main/blog/2023-03-31-keycloak-sso-centrifugo.md","source":"@site/blog/2023-03-31-keycloak-sso-centrifugo.md","title":"Setting up Keycloak SSO authentication flow and connecting to Centrifugo WebSocket","description":"This tutorial shows how to connect to Centrifugo when using Keycloak SSO flow for user authentication. Here we build a simple demo app using React and Vite.","date":"2023-03-31T00:00:00.000Z","tags":[{"inline":true,"label":"centrifugo","permalink":"/blog/tags/centrifugo"},{"inline":true,"label":"keycloak","permalink":"/blog/tags/keycloak"},{"inline":true,"label":"sso","permalink":"/blog/tags/sso"},{"inline":true,"label":"authentication","permalink":"/blog/tags/authentication"}],"readingTime":5.11,"hasTruncateMarker":true,"authors":[{"name":"Alexander Emelin","title":"Author of Centrifugo","imageURL":"https://github.com/FZambia.png","key":null,"page":null}],"frontMatter":{"title":"Setting up Keycloak SSO authentication flow and connecting to Centrifugo WebSocket","tags":["centrifugo","keycloak","sso","authentication"],"description":"This tutorial shows how to connect to Centrifugo when using Keycloak SSO flow for user authentication. Here we build a simple demo app using React and Vite.","author":"Alexander Emelin","authorTitle":"Author of Centrifugo","authorImageURL":"https://github.com/FZambia.png","image":"/img/keycloak_sso_cover.jpg","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Centrifugo v5 released","permalink":"/blog/2023/06/29/centrifugo-v5-released"},"nextItem":{"title":"Improving Centrifugo Redis Engine throughput and allocation efficiency with Rueidis Go library","permalink":"/blog/2022/12/20/improving-redis-engine-performance"}}')},73031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var o=t(35629),i=t(74848),a=t(28453);const c={title:"Setting up Keycloak SSO authentication flow and connecting to Centrifugo WebSocket",tags:["centrifugo","keycloak","sso","authentication"],description:"This tutorial shows how to connect to Centrifugo when using Keycloak SSO flow for user authentication. Here we build a simple demo app using React and Vite.",author:"Alexander Emelin",authorTitle:"Author of Centrifugo",authorImageURL:"https://github.com/FZambia.png",image:"/img/keycloak_sso_cover.jpg",hide_table_of_contents:!1},s=void 0,r={authorsImageUrls:[void 0]},l=[{value:"TLDR",id:"tldr",level:2},{value:"Keycloak",id:"keycloak",level:2},{value:"Centrifugo",id:"centrifugo",level:2},{value:"React app with Vite",id:"react-app-with-vite",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(17498).A+"",width:"1827",height:"855"})}),"\n",(0,i.jsx)(n.p,{children:"Securing user authentication and management can often be a challenging task when developing a modern application. As a result, many developers choose to delegate this responsibility to third-party identity providers, such as Okta, Auth0, or Keycloak."}),"\n",(0,i.jsx)(n.p,{children:"In this blog post, we'll go through the process of setting up Single Sign-On (SSO) authentication using Keycloak - popular and powerful identity provider. After setting up SSO we will create React application and connect to Centrifugo using access token generated by Keycloak for our test user:"}),"\n",(0,i.jsx)("video",{width:"100%",loop:!0,autoPlay:"autoplay",muted:!0,controls:"",src:"/img/keycloak.mp4"}),"\n",(0,i.jsx)(n.h2,{id:"tldr",children:"TLDR"}),"\n",(0,i.jsxs)(n.p,{children:["The integraion is possible since Centrifugo works with ",(0,i.jsx)(n.a,{href:"/docs/server/authentication",children:"standard JWT for authentication"})," and additionally ",(0,i.jsx)(n.a,{href:"https://centrifugal.dev/docs/server/authentication#json-web-key-support",children:"supports JSON Web Key"})," specification."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is a final ",(0,i.jsx)(n.a,{href:"https://github.com/centrifugal/examples/tree/master/v4/keycloak_sso_auth",children:"source code"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"keycloak",children:"Keycloak"}),"\n",(0,i.jsx)(n.p,{children:"First, run Keycloak using the following Docker command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run --rm -it -p 8080:8080 \\\n    -e KEYCLOAK_ADMIN=admin \\\n    -e KEYCLOAK_ADMIN_PASSWORD=admin \\\n    quay.io/keycloak/keycloak:21.0.1 start-dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After starting Keycloak, go to ",(0,i.jsx)(n.a,{href:"http://localhost:8080/admin",children:"http://localhost:8080/admin"})," and login. Then perform the following tasks:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a new realm named ",(0,i.jsx)(n.code,{children:"myrealm"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Create a new client named ",(0,i.jsx)(n.code,{children:"myclient"}),". Set valid redirect URIs to ",(0,i.jsx)(n.code,{children:"http://localhost:5173/*"}),", and web origins as ",(0,i.jsx)(n.code,{children:"http://localhost:5173"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Create a user named ",(0,i.jsx)(n.code,{children:"myuser"})," and set a password for it (in Credentials tab)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"https://www.keycloak.org/getting-started/getting-started-docker",children:"this guide"})," for additional details and illustrations of the process."]}),"\n",(0,i.jsxs)(n.p,{children:["Make sure your created client is ",(0,i.jsx)(n.code,{children:"public"})," (this is default) since we will request token directly from the web application."]}),"\n",(0,i.jsx)(n.h2,{id:"centrifugo",children:"Centrifugo"}),"\n",(0,i.jsx)(n.p,{children:"Next, run Centrifugo using the following Docker command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker run --rm -it -p 8000:8000 \\\n    -e CENTRIFUGO_ALLOWED_ORIGINS="http://localhost:5173" \\\n    -e CENTRIFUGO_TOKEN_JWKS_PUBLIC_ENDPOINT="http://host.docker.internal:8080/realms/myrealm/protocol/openid-connect/certs" \\\n    -e CENTRIFUGO_ALLOW_USER_LIMITED_CHANNELS=true \\\n    -e CENTRIFUGO_ADMIN=true \\\n    -e CENTRIFUGO_ADMIN_SECRET=secret \\\n    -e CENTRIFUGO_ADMIN_PASSWORD=admin \\\n    centrifugo/centrifugo:v4.1.2 centrifugo\n'})}),"\n",(0,i.jsx)(n.p,{children:"Some comments about environment variables used here:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CENTRIFUGO_TOKEN_JWKS_PUBLIC_ENDPOINT allows tell Centrifugo to use JSON Web Key spec when validating tokens, we point to Keycloak's JWKS endpoint"}),"\n",(0,i.jsxs)(n.li,{children:["CENTRIFUGO_ALLOWED_ORIGINS is required since we will build Vite + React based app running on ",(0,i.jsx)(n.a,{href:"http://localhost:5173",children:"http://localhost:5173"})]}),"\n",(0,i.jsx)(n.li,{children:"CENTRIFUGO_ALLOW_USER_LIMITED_CHANNELS - not required to connect, but you will see in the source code that we additionally subscribe to a user personal channel"}),"\n",(0,i.jsx)(n.li,{children:"CENTRIFUGO_ADMIN, CENTRIFUGO_ADMIN_SECRET, CENTRIFUGO_ADMIN_PASSWORD - to enable Centrifugo admin web UI"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Also note we are using ",(0,i.jsx)(n.code,{children:"host.docker.internal"})," to access host port from inside the Docker network."]}),"\n",(0,i.jsx)(n.h2,{id:"react-app-with-vite",children:"React app with Vite"}),"\n",(0,i.jsxs)(n.p,{children:["Now, let's create a new React app using very popular ",(0,i.jsx)(n.a,{href:"https://vitejs.dev/",children:"Vite"})," tool:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm create vite@latest keycloak_sso_auth -- --template react\ncd keycloak_sso_auth\nnpm install\n"})}),"\n",(0,i.jsx)(n.p,{children:"Also, install the necessary additional packages for the React app:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save @react-keycloak/web centrifuge keycloak-js\n"})}),"\n",(0,i.jsx)(n.p,{children:"And start the development server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Navigate to ",(0,i.jsx)(n.a,{href:"http://localhost:5173/",children:"http://localhost:5173/"}),". You should see default Vite template working, we are going to modify it a bit."]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"localhost"}),", not ",(0,i.jsx)(n.code,{children:"127.0.0.1"})," - since we used ",(0,i.jsx)(n.code,{children:"localhost"})," for Keyloak and Centrifugo configurations above."]})}),"\n",(0,i.jsxs)(n.p,{children:["Add the following into ",(0,i.jsx)(n.code,{children:"main.jsx"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { ReactKeycloakProvider } from '@react-keycloak/web'\nimport App from './App'\nimport './index.css'\n\nimport Keycloak from \"keycloak-js\";\n\nconst keycloakClient = new Keycloak({\n  url: \"http://localhost:8080\",\n  realm: \"myrealm\",\n  clientId: \"myclient\"\n})\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <ReactKeycloakProvider authClient={keycloakClient}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReactKeycloakProvider>,\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that we configured ",(0,i.jsx)(n.code,{children:"Keycloak"})," instance pointing it to our Keycloak server. We also use ",(0,i.jsx)(n.code,{children:"@react-keycloak/web"})," package to wrap React app into ",(0,i.jsx)(n.code,{children:"ReactKeycloakProvider"})," component. It simplifies working with Keycloak by providing some useful hooks - we are using this hook below."]}),"\n",(0,i.jsxs)(n.p,{children:["Our ",(0,i.jsx)(n.code,{children:"App"})," component inside ",(0,i.jsx)(n.code,{children:"App.jsx"})," may look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import React, { useState, useEffect } from 'react';\nimport logo from './assets/centrifugo.svg'\nimport { Centrifuge } from \"centrifuge\";\nimport { useKeycloak } from '@react-keycloak/web'\nimport './App.css'\n\nfunction App() {\n  const { keycloak, initialized } = useKeycloak()\n\n  if (!initialized) {\n    return null;\n  }\n\n  return (\n    <div>\n      <header>\n        <p>\n          SSO with Keycloak and Centrifugo\n        </p>\n        {keycloak.authenticated ? (\n          <div>\n            <p>Logged in as {keycloak.tokenParsed?.preferred_username}</p>\n            <button type=\"button\" onClick={() => keycloak.logout()}>\n              Logout\n            </button>\n          </div>\n        ) : (\n          <button type=\"button\" onClick={() => keycloak.login()}>\n            Login\n          </button>\n        )}\n      </header>\n    </div >\n  );\n}\n\nexport default App\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This is actually enough for SSO flow to start working! You can click on login button and make sure that it's possible to use ",(0,i.jsx)(n.code,{children:"myuser"})," credentials to log into the application. And log out after that."]}),"\n",(0,i.jsxs)(n.p,{children:["The only missing part is Centrifugo. We can initialize connection inside ",(0,i.jsx)(n.code,{children:"useEffect"})," hook of ",(0,i.jsx)(n.code,{children:"App"})," component:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'useEffect(() => {\n  if (!initialized || !keycloak.authenticated) {\n    return;\n  }\n  const centrifuge = new Centrifuge("ws://localhost:8000/connection/websocket", {\n    token: keycloak.token,\n    getToken: function () {\n      return new Promise((resolve, reject) => {\n        keycloak.updateToken(5).then(function () {\n          resolve(keycloak.token);\n        }).catch(function (err) {\n          reject(err);\n          keycloak.logout();\n        });\n      })\n    }\n  });\n\n  centrifuge.connect();\n\n  return () => {\n    centrifuge.disconnect();\n  };\n}, [keycloak, initialized]);\n'})}),"\n",(0,i.jsx)(n.p,{children:"The important thing here is how we configure tokens: we are using Keycloak client methods to set initial token and refresh the token when required."}),"\n",(0,i.jsx)(n.p,{children:"I also added some extra elements to the code to make it look a bit nicer. For example, we can listen to Centriffuge client state changes and show connection indicator on the page:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'function App() {\n  const [connectionState, setConnectionState] = useState("disconnected");\n  const stateToEmoji = {\n    "disconnected": "\ud83d\udd34",\n    "connecting": "\ud83d\udfe0",\n    "connected": "\ud83d\udfe2"\n  }\n  ...\n\n  useEffect(() => {\n    ...\n    centrifuge.on(\'state\', function (ctx) {\n      setConnectionState(ctx.newState);\n    })\n    ...\n\n  return (\n    ...\n    <span className={"connectionState " + connectionState}>\n      {stateToEmoji[connectionState]}\n    </span>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can find more details about Centrifugo client SDK API and states in ",(0,i.jsx)(n.a,{href:"/docs/transports/client_api",children:"client SDK spec"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If you look at source code on Github - you will also find an example of channel subscription to a user personal channel:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'function App() {\n  ...\n  const [publishedData, setPublishedData] = useState("");\n  ...\n\n  useEffect(() => {\n    ...\n    const userChannel = "#" + keycloak.tokenParsed?.sub;\n    const sub = centrifuge.newSubscription(userChannel);\n    sub.on("publication", function (ctx) {\n      setPublishedData(JSON.stringify(ctx.data));\n    }).subscribe();\n    ...\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can now:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"test the SSO setup by logging into application"}),"\n",(0,i.jsx)(n.li,{children:"making sure connection is successful"}),"\n",(0,i.jsxs)(n.li,{children:["try publishing a message into a user channel via the ",(0,i.jsx)(n.a,{href:"http://localhost:8000/#/actions",children:"Centrifugo Web UI"}),". The published message will appear on application screen in real-time."]}),"\n"]}),"\n",(0,i.jsx)("video",{width:"100%",loop:!0,autoPlay:"autoplay",muted:!0,controls:"",src:"/img/keycloak_publish.mp4"}),"\n",(0,i.jsxs)(n.p,{children:["That's it! We have successfully set up Keycloak SSO authentication with Centrifugo and a React application. Again, ",(0,i.jsx)(n.a,{href:"https://github.com/centrifugal/examples/tree/master/v4/keycloak_sso_auth",children:"source code"})," is on Github."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);